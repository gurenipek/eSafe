

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Jun  6 17:19:59 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    35                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    36                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    37                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39  0000                     
    40                           ; Version 2.20
    41                           ; Generated 12/02/2020 GMT
    42                           ; 
    43                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    44                           ; All rights reserved.
    45                           ; 
    46                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    47                           ; 
    48                           ; Redistribution and use in source and binary forms, with or without modification, are
    49                           ; permitted provided that the following conditions are met:
    50                           ; 
    51                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    52                           ;        conditions and the following disclaimer.
    53                           ; 
    54                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    55                           ;        of conditions and the following disclaimer in the documentation and/or other
    56                           ;        materials provided with the distribution.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4620 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74  0000                     
    75                           	psect	idataCOMRAM
    76  001C94                     __pidataCOMRAM:
    77                           	callstack 0
    78                           
    79                           ;initializer for _segmentData
    80  001C94  3F                 	db	63
    81  001C95  06                 	db	6
    82  001C96  5B                 	db	91
    83  001C97  4F                 	db	79
    84  001C98  66                 	db	102
    85  001C99  6D                 	db	109
    86  001C9A  7D                 	db	125
    87  001C9B  07                 	db	7
    88  001C9C  7F                 	db	127
    89  001C9D  6F                 	db	111
    90  001C9E  00                 	db	0
    91  001C9F  49                 	db	73
    92  001CA0  48                 	db	72
    93  001CA1  08                 	db	8
    94  001CA2  00                 	db	0
    95  001CA3  00                 	db	0
    96                           
    97                           ;initializer for _TIM1LOAD
    98  001CA4  C350               	dw	50000
    99  001CA6  0000               	dw	0
   100                           
   101                           ;initializer for _TIM0LOAD
   102  001CA8  7530               	dw	30000
   103  001CAA  0000               	dw	0
   104                           
   105                           ;initializer for _lcd_y
   106  001CAC  01                 	db	1
   107                           
   108                           ;initializer for _lcd_x
   109  001CAD  01                 	db	1
   110                           
   111                           ;initializer for _downCounter90s
   112  001CAE  5A                 	db	90
   113  0000                     _TMR1L	set	4046
   114  0000                     _PORTE	set	3972
   115  0000                     _PORTA	set	3968
   116  0000                     _TRISB	set	3987
   117  0000                     _PORTB	set	3969
   118  0000                     _TRISD	set	3989
   119  0000                     _TRISEbits	set	3990
   120  0000                     _PORTD	set	3971
   121  0000                     _PORTEbits	set	3972
   122  0000                     _ADRESL	set	4035
   123  0000                     _ADRESH	set	4036
   124  0000                     _ADCON2	set	4032
   125  0000                     _ADCON1	set	4033
   126  0000                     _ADCON0	set	4034
   127  0000                     _TRISA	set	3986
   128  0000                     _PIR1bits	set	3998
   129  0000                     _TMR2	set	4044
   130  0000                     _PR2	set	4043
   131  0000                     _T2CON	set	4042
   132  0000                     _T1CON	set	4045
   133  0000                     _TMR1H	set	4047
   134  0000                     _TMR0L	set	4054
   135  0000                     _TMR0H	set	4055
   136  0000                     _T0CON	set	4053
   137  0000                     _IRCF0	set	32412
   138  0000                     _IRCF1	set	32413
   139  0000                     _IRCF2	set	32414
   140  0000                     _PLLEN	set	31966
   141  0000                     _RBIP	set	32648
   142  0000                     _RBPU	set	32655
   143  0000                     _RBIE	set	32659
   144  0000                     _TMR2IF	set	31985
   145  0000                     _TMR1IF	set	31984
   146  0000                     _INT0IE	set	32660
   147  0000                     _TMR0IF	set	32658
   148  0000                     _RBIF	set	32656
   149  0000                     _INT0IF	set	32657
   150  0000                     _ADIF	set	31990
   151  0000                     _ADIP	set	31998
   152  0000                     _ADIE	set	31982
   153  0000                     _IPEN	set	32391
   154  0000                     _TMR2IE	set	31977
   155  0000                     _TMR2ON	set	32338
   156  0000                     _TMR1IE	set	31976
   157  0000                     _T1CKPS1	set	32365
   158  0000                     _T1CKPS0	set	32364
   159  0000                     _TMR1CS	set	32361
   160  0000                     _T1OSCEN	set	32363
   161  0000                     _TMR1ON	set	32360
   162  0000                     _PEIE	set	32662
   163  0000                     _GIE	set	32663
   164  0000                     _TMR0IE	set	32661
   165  0000                     _T0PS2	set	32426
   166  0000                     _T0PS1	set	32425
   167  0000                     _T0PS0	set	32424
   168  0000                     _PSA	set	32427
   169  0000                     _T0CS	set	32429
   170  0000                     _T08BIT	set	32430
   171  0000                     _TMR0ON	set	32431
   172                           
   173                           	psect	smallconst
   174  001000                     __psmallconst:
   175                           	callstack 0
   176  001000  00                 	db	0
   177  001001                     STR_1:
   178  001001  53                 	db	83	;'S'
   179  001002  75                 	db	117	;'u'
   180  001003  70                 	db	112	;'p'
   181  001004  65                 	db	101	;'e'
   182  001005  72                 	db	114	;'r'
   183  001006  53                 	db	83	;'S'
   184  001007  65                 	db	101	;'e'
   185  001008  63                 	db	99	;'c'
   186  001009  75                 	db	117	;'u'
   187  00100A  72                 	db	114	;'r'
   188  00100B  65                 	db	101	;'e'
   189  00100C  53                 	db	83	;'S'
   190  00100D  61                 	db	97	;'a'
   191  00100E  66                 	db	102	;'f'
   192  00100F  65                 	db	101	;'e'
   193  001010  21                 	db	33
   194  001011  00                 	db	0
   195  001012                     STR_11:
   196  001012  53                 	db	83	;'S'
   197  001013  61                 	db	97	;'a'
   198  001014  66                 	db	102	;'f'
   199  001015  65                 	db	101	;'e'
   200  001016  20                 	db	32
   201  001017  69                 	db	105	;'i'
   202  001018  73                 	db	115	;'s'
   203  001019  20                 	db	32
   204  00101A  4C                 	db	76	;'L'
   205  00101B  6F                 	db	111	;'o'
   206  00101C  63                 	db	99	;'c'
   207  00101D  6B                 	db	107	;'k'
   208  00101E  65                 	db	101	;'e'
   209  00101F  64                 	db	100	;'d'
   210  001020  21                 	db	33
   211  001021  00                 	db	0
   212  001022                     STR_4:
   213  001022  49                 	db	73	;'I'
   214  001023  6E                 	db	110	;'n'
   215  001024  70                 	db	112	;'p'
   216  001025  75                 	db	117	;'u'
   217  001026  74                 	db	116	;'t'
   218  001027  20                 	db	32
   219  001028  50                 	db	80	;'P'
   220  001029  61                 	db	97	;'a'
   221  00102A  73                 	db	115	;'s'
   222  00102B  73                 	db	115	;'s'
   223  00102C  77                 	db	119	;'w'
   224  00102D  6F                 	db	111	;'o'
   225  00102E  72                 	db	114	;'r'
   226  00102F  64                 	db	100	;'d'
   227  001030  3A                 	db	58	;':'
   228  001031  00                 	db	0
   229  001032                     STR_8:
   230  001032  55                 	db	85	;'U'
   231  001033  6E                 	db	110	;'n'
   232  001034  6C                 	db	108	;'l'
   233  001035  6F                 	db	111	;'o'
   234  001036  63                 	db	99	;'c'
   235  001037  6B                 	db	107	;'k'
   236  001038  65                 	db	101	;'e'
   237  001039  64                 	db	100	;'d'
   238  00103A  3B                 	db	59	;';'
   239  00103B  20                 	db	32
   240  00103C  50                 	db	80	;'P'
   241  00103D  72                 	db	114	;'r'
   242  00103E  65                 	db	101	;'e'
   243  00103F  73                 	db	115	;'s'
   244  001040  73                 	db	115	;'s'
   245  001041  00                 	db	0
   246  001042                     STR_2:
   247  001042  53                 	db	83	;'S'
   248  001043  65                 	db	101	;'e'
   249  001044  74                 	db	116	;'t'
   250  001045  20                 	db	32
   251  001046  50                 	db	80	;'P'
   252  001047  61                 	db	97	;'a'
   253  001048  73                 	db	115	;'s'
   254  001049  73                 	db	115	;'s'
   255  00104A  77                 	db	119	;'w'
   256  00104B  6F                 	db	111	;'o'
   257  00104C  72                 	db	114	;'r'
   258  00104D  64                 	db	100	;'d'
   259  00104E  3A                 	db	58	;':'
   260  00104F  00                 	db	0
   261  001050                     STR_9:
   262  001050  52                 	db	82	;'R'
   263  001051  42                 	db	66	;'B'
   264  001052  34                 	db	52	;'4'
   265  001053  20                 	db	32
   266  001054  74                 	db	116	;'t'
   267  001055  6F                 	db	111	;'o'
   268  001056  20                 	db	32
   269  001057  6C                 	db	108	;'l'
   270  001058  6F                 	db	111	;'o'
   271  001059  63                 	db	99	;'c'
   272  00105A  6B                 	db	107	;'k'
   273  00105B  21                 	db	33
   274  00105C  00                 	db	0
   275  00105D                     STR_10:
   276  00105D  59                 	db	89	;'Y'
   277  00105E  6F                 	db	111	;'o'
   278  00105F  75                 	db	117	;'u'
   279  001060  20                 	db	32
   280  001061  46                 	db	70	;'F'
   281  001062  61                 	db	97	;'a'
   282  001063  69                 	db	105	;'i'
   283  001064  6C                 	db	108	;'l'
   284  001065  65                 	db	101	;'e'
   285  001066  64                 	db	100	;'d'
   286  001067  21                 	db	33
   287  001068  00                 	db	0
   288  001069                     STR_6:
   289  001069  54                 	db	84	;'T'
   290  00106A  72                 	db	114	;'r'
   291  00106B  79                 	db	121	;'y'
   292  00106C  20                 	db	32
   293  00106D  41                 	db	65	;'A'
   294  00106E  67                 	db	103	;'g'
   295  00106F  61                 	db	97	;'a'
   296  001070  69                 	db	105	;'i'
   297  001071  6E                 	db	110	;'n'
   298  001072  3A                 	db	58	;':'
   299  001073  00                 	db	0
   300  001074                     STR_3:
   301  001074  5F                 	db	95	;'_'
   302  001075  5F                 	db	95	;'_'
   303  001076  2D                 	db	45
   304  001077  5F                 	db	95	;'_'
   305  001078  5F                 	db	95	;'_'
   306  001079  2D                 	db	45
   307  00107A  5F                 	db	95	;'_'
   308  00107B  5F                 	db	95	;'_'
   309  00107C  00                 	db	0
   310  00107D  00                 	db	0	; dummy byte at the end
   311  0000                     
   312                           ; #config settings
   313                           
   314                           	psect	cinit
   315  001AFC                     __pcinit:
   316                           	callstack 0
   317  001AFC                     start_initialization:
   318                           	callstack 0
   319  001AFC                     __initialization:
   320                           	callstack 0
   321                           
   322                           ; Initialize objects allocated to COMRAM (27 bytes)
   323                           ; load TBLPTR registers with __pidataCOMRAM
   324  001AFC  0E94               	movlw	low __pidataCOMRAM
   325  001AFE  6EF6               	movwf	tblptrl,c
   326  001B00  0E1C               	movlw	high __pidataCOMRAM
   327  001B02  6EF7               	movwf	tblptrh,c
   328  001B04  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   329  001B06  6EF8               	movwf	tblptru,c
   330  001B08  EE00  F02A         	lfsr	0,__pdataCOMRAM
   331  001B0C  EE10 F01B          	lfsr	1,27
   332  001B10                     copy_data0:
   333  001B10  0009               	tblrd		*+
   334  001B12  CFF5 FFEE          	movff	tablat,postinc0
   335  001B16  50E5               	movf	postdec1,w,c
   336  001B18  50E1               	movf	fsr1l,w,c
   337  001B1A  E1FA               	bnz	copy_data0
   338                           
   339                           ; Clear objects allocated to COMRAM (22 bytes)
   340  001B1C  EE00  F045         	lfsr	0,__pbssCOMRAM
   341  001B20  0E16               	movlw	22
   342  001B22                     clear_0:
   343  001B22  6AEE               	clrf	postinc0,c
   344  001B24  06E8               	decf	wreg,f,c
   345  001B26  E1FD               	bnz	clear_0
   346  001B28                     end_of_initialization:
   347                           	callstack 0
   348  001B28                     __end_of__initialization:
   349                           	callstack 0
   350  001B28  905B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   351  001B2A  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   352  001B2C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   353  001B2E  6EF8               	movwf	tblptru,c
   354  001B30  0100               	movlb	0
   355  001B32  EF3F  F008         	goto	_main	;jump to C main() function
   356                           
   357                           	psect	bssCOMRAM
   358  000045                     __pbssCOMRAM:
   359                           	callstack 0
   360  000045                     _displayData:
   361                           	callstack 0
   362  000045                     	ds	4
   363  000049                     _passwordsSet:
   364                           	callstack 0
   365  000049                     	ds	3
   366  00004C                     _passwordsAttempt:
   367                           	callstack 0
   368  00004C                     	ds	3
   369  00004F                     _lockAgain:
   370                           	callstack 0
   371  00004F                     	ds	2
   372  000051                     _TMR2Counter:
   373                           	callstack 0
   374  000051                     	ds	2
   375  000053                     	ds	1
   376  000054                     my_ISR@halfSec:
   377                           	callstack 0
   378  000054                     	ds	1
   379  000055                     _blinkEnable:
   380                           	callstack 0
   381  000055                     	ds	1
   382  000056                     _start3:
   383                           	callstack 0
   384  000056                     	ds	1
   385  000057                     _safeState:
   386                           	callstack 0
   387  000057                     	ds	1
   388  000058                     _firstTime:
   389                           	callstack 0
   390  000058                     	ds	1
   391  000059                     _result_ADC:
   392                           	callstack 0
   393  000059                     	ds	1
   394  00005A                     _digitEntryCount:
   395                           	callstack 0
   396  00005A                     	ds	1
   397                           
   398                           	psect	dataCOMRAM
   399  00002A                     __pdataCOMRAM:
   400                           	callstack 0
   401  00002A                     _segmentData:
   402                           	callstack 0
   403  00002A                     	ds	16
   404  00003A                     _TIM1LOAD:
   405                           	callstack 0
   406  00003A                     	ds	4
   407  00003E                     _TIM0LOAD:
   408                           	callstack 0
   409  00003E                     	ds	4
   410  000042                     _lcd_y:
   411                           	callstack 0
   412  000042                     	ds	1
   413  000043                     _lcd_x:
   414                           	callstack 0
   415  000043                     	ds	1
   416  000044                     _downCounter90s:
   417                           	callstack 0
   418  000044                     	ds	1
   419                           
   420                           	psect	cstackCOMRAM
   421  000001                     __pcstackCOMRAM:
   422                           	callstack 0
   423  000001                     ?___lwdiv:
   424                           	callstack 0
   425  000001                     ?i2___awdiv:
   426                           	callstack 0
   427  000001                     ___lwdiv@dividend:
   428                           	callstack 0
   429  000001                     i2___awdiv@dividend:
   430                           	callstack 0
   431                           
   432                           ; 2 bytes @ 0x0
   433  000001                     	ds	2
   434  000003                     ___lwdiv@divisor:
   435                           	callstack 0
   436  000003                     i2___awdiv@divisor:
   437                           	callstack 0
   438                           
   439                           ; 2 bytes @ 0x2
   440  000003                     	ds	2
   441  000005                     i2___awdiv@counter:
   442                           	callstack 0
   443  000005                     ___lwdiv@quotient:
   444                           	callstack 0
   445                           
   446                           ; 2 bytes @ 0x4
   447  000005                     	ds	1
   448  000006                     i2___awdiv@sign:
   449                           	callstack 0
   450                           
   451                           ; 1 bytes @ 0x5
   452  000006                     	ds	1
   453  000007                     ___lwdiv@counter:
   454                           	callstack 0
   455  000007                     i2___awdiv@quotient:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x6
   459  000007                     	ds	2
   460  000009                     ??_my_ISR:
   461                           
   462                           ; 1 bytes @ 0x8
   463  000009                     	ds	6
   464  00000F                     my_ISR@before:
   465                           	callstack 0
   466                           
   467                           ; 1 bytes @ 0xE
   468  00000F                     	ds	1
   469  000010                     my_ISR@portData:
   470                           	callstack 0
   471                           
   472                           ; 1 bytes @ 0xF
   473  000010                     	ds	1
   474  000011                     my_ISR@read_ADC_Raw:
   475                           	callstack 0
   476                           
   477                           ; 2 bytes @ 0x10
   478  000011                     	ds	2
   479  000013                     ??_LCDCmd:
   480  000013                     ??_LCDDat:
   481  000013                     ?_passwordCheck:
   482                           	callstack 0
   483  000013                     ?___awdiv:
   484                           	callstack 0
   485  000013                     delayWithTimer2@milliseconds:
   486                           	callstack 0
   487  000013                     ___awdiv@dividend:
   488                           	callstack 0
   489                           
   490                           ; 2 bytes @ 0x12
   491  000013                     	ds	1
   492  000014                     LCDCmd@cmd:
   493                           	callstack 0
   494  000014                     LCDDat@dat:
   495                           	callstack 0
   496                           
   497                           ; 1 bytes @ 0x13
   498  000014                     	ds	1
   499  000015                     LCDGoto@p_1:
   500                           	callstack 0
   501  000015                     delayWithTimer2@currentVal:
   502                           	callstack 0
   503  000015                     ___awdiv@divisor:
   504                           	callstack 0
   505                           
   506                           ; 2 bytes @ 0x14
   507  000015                     	ds	1
   508  000016                     LCDGoto@p_2:
   509                           	callstack 0
   510                           
   511                           ; 1 bytes @ 0x15
   512  000016                     	ds	1
   513  000017                     passwordCheck@n:
   514                           	callstack 0
   515  000017                     ___awdiv@counter:
   516                           	callstack 0
   517  000017                     LCDStr@str:
   518                           	callstack 0
   519                           
   520                           ; 2 bytes @ 0x16
   521  000017                     	ds	1
   522  000018                     ___awdiv@sign:
   523                           	callstack 0
   524                           
   525                           ; 1 bytes @ 0x17
   526  000018                     	ds	1
   527  000019                     ??_LCDStr:
   528  000019                     ___awdiv@quotient:
   529                           	callstack 0
   530                           
   531                           ; 2 bytes @ 0x18
   532  000019                     	ds	2
   533  00001B                     LCDStr@i:
   534                           	callstack 0
   535  00001B                     displayNumbers@value:
   536                           	callstack 0
   537                           
   538                           ; 2 bytes @ 0x1A
   539  00001B                     	ds	2
   540  00001D                     displayNumbers@digitNo:
   541                           	callstack 0
   542                           
   543                           ; 1 bytes @ 0x1C
   544  00001D                     	ds	1
   545  00001E                     ??_displayNumbers:
   546                           
   547                           ; 1 bytes @ 0x1D
   548  00001E                     	ds	2
   549  000020                     displayNumbers@digitL:
   550                           	callstack 0
   551                           
   552                           ; 1 bytes @ 0x1F
   553  000020                     	ds	1
   554  000021                     displayNumbers@digitH:
   555                           	callstack 0
   556                           
   557                           ; 1 bytes @ 0x20
   558  000021                     	ds	1
   559  000022                     ??_main:
   560                           
   561                           ; 1 bytes @ 0x21
   562  000022                     	ds	2
   563  000024                     main@isValid:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x23
   567  000024                     	ds	2
   568  000026                     main@heaterTemperature:
   569                           	callstack 0
   570                           
   571                           ; 1 bytes @ 0x25
   572  000026                     	ds	1
   573  000027                     main@i:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x26
   577  000027                     	ds	2
   578  000029                     main@attemption:
   579                           	callstack 0
   580                           
   581                           ; 1 bytes @ 0x28
   582  000029                     	ds	1
   583                           
   584 ;;
   585 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   586 ;;
   587 ;; *************** function _main *****************
   588 ;; Defined at:
   589 ;;		line 24 in file "eSafeMain.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;  i               2   38[COMRAM] int 
   594 ;;  isValid         2   35[COMRAM] int 
   595 ;;  attemption      1   40[COMRAM] unsigned char 
   596 ;;  heaterTemper    1   37[COMRAM] unsigned char 
   597 ;;  digit4          1    0        unsigned char 
   598 ;;  digit3          1    0        unsigned char 
   599 ;;  digit2          1    0        unsigned char 
   600 ;;  digit1          1    0        unsigned char 
   601 ;; Return value:  Size  Location     Type
   602 ;;                  1    wreg      void 
   603 ;; Registers used:
   604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   605 ;; Tracked objects:
   606 ;;		On entry : 0/0
   607 ;;		On exit  : 0/0
   608 ;;		Unchanged: 0/0
   609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   611 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   612 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   613 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   614 ;;Total ram usage:        8 bytes
   615 ;; Hardware stack levels required when called: 5
   616 ;; This function calls:
   617 ;;		_InitLCD
   618 ;;		_LCDCmd
   619 ;;		_LCDGoto
   620 ;;		_LCDStr
   621 ;;		___awdiv
   622 ;;		_config_ADC_Potentiometer
   623 ;;		_config_ADC_Thermometer
   624 ;;		_delayWithTimer2
   625 ;;		_displayNumbers
   626 ;;		_init_ADC_Potentiometer
   627 ;;		_init_ADC_Thermometer
   628 ;;		_init_Clock
   629 ;;		_init_PORTB
   630 ;;		_init_TIMER0
   631 ;;		_init_TIMER1
   632 ;;		_init_TIMER2
   633 ;;		_passwordCheck
   634 ;; This function is called by:
   635 ;;		Startup code after reset
   636 ;; This function uses a non-reentrant model
   637 ;;
   638                           
   639                           	psect	text0
   640  00107E                     __ptext0:
   641                           	callstack 0
   642  00107E                     _main:
   643                           	callstack 26
   644  00107E                     
   645                           ;eSafeMain.c: 26:   byte digit1, digit2, digit3, digit4;;eSafeMain.c: 27:   byte heaterT
      +                          emperature;;eSafeMain.c: 28:   byte attemption;;eSafeMain.c: 29:   int isValid;;eSafeMai
      +                          n.c: 32:   init_Clock();
   646  00107E  EC7D  F00E         	call	_init_Clock	;wreg free
   647  001082                     
   648                           ;eSafeMain.c: 33:   InitLCD();
   649  001082  ECB5  F00D         	call	_InitLCD	;wreg free
   650  001086                     
   651                           ;eSafeMain.c: 34:   init_ADC_Thermometer();
   652  001086  ECE4  F00D         	call	_init_ADC_Thermometer	;wreg free
   653  00108A                     
   654                           ;eSafeMain.c: 35:   init_ADC_Potentiometer();
   655  00108A  ECF7  F00D         	call	_init_ADC_Potentiometer	;wreg free
   656  00108E                     
   657                           ;eSafeMain.c: 36:   init_PORTB();
   658  00108E  EC63  F00E         	call	_init_PORTB	;wreg free
   659  001092                     
   660                           ;eSafeMain.c: 37:   init_TIMER2();
   661  001092  EC1B  F00E         	call	_init_TIMER2	;wreg free
   662                           
   663                           ;eSafeMain.c: 39:   safeState = 1;
   664  001096  0E01               	movlw	1
   665  001098  6E57               	movwf	_safeState^0,c
   666  00109A                     l300:
   667                           
   668                           ;eSafeMain.c: 41:       PORTB = 0;
   669  00109A  0E00               	movlw	0
   670  00109C  6E81               	movwf	129,c	;volatile
   671                           
   672                           ;eSafeMain.c: 42:       PORTD = 0;
   673  00109E  0E00               	movlw	0
   674  0010A0  6E83               	movwf	131,c	;volatile
   675                           
   676                           ;eSafeMain.c: 46:       safeState = 1;
   677  0010A2  0E01               	movlw	1
   678  0010A4  6E57               	movwf	_safeState^0,c
   679  0010A6                     
   680                           ;eSafeMain.c: 47:       LCDCmd(0x01);
   681  0010A6  0E01               	movlw	1
   682  0010A8  EC3B  F00E         	call	_LCDCmd
   683  0010AC                     
   684                           ;eSafeMain.c: 48:       LCDGoto(1, 1);
   685  0010AC  0E01               	movlw	1
   686  0010AE  6E15               	movwf	LCDGoto@p_1^0,c
   687  0010B0  0E01               	movlw	1
   688  0010B2  EC9B  F00D         	call	_LCDGoto
   689  0010B6                     
   690                           ;eSafeMain.c: 49:       LCDStr("SuperSecureSafe!");
   691  0010B6  0E01               	movlw	low STR_1
   692  0010B8  6E17               	movwf	LCDStr@str^0,c
   693  0010BA  0E10               	movlw	high STR_1
   694  0010BC  6E18               	movwf	(LCDStr@str+1)^0,c
   695  0010BE  ECD4  F00C         	call	_LCDStr	;wreg free
   696  0010C2                     
   697                           ;eSafeMain.c: 50:       delayWithTimer2 (2000);
   698  0010C2  0E07               	movlw	7
   699  0010C4  6E14               	movwf	(delayWithTimer2@milliseconds+1)^0,c
   700  0010C6  0ED0               	movlw	208
   701  0010C8  6E13               	movwf	delayWithTimer2@milliseconds^0,c
   702  0010CA  ECCE  F00D         	call	_delayWithTimer2	;wreg free
   703  0010CE                     
   704                           ;eSafeMain.c: 54:       safeState = 2;
   705  0010CE  0E02               	movlw	2
   706  0010D0  6E57               	movwf	_safeState^0,c
   707  0010D2                     
   708                           ;eSafeMain.c: 56:       LCDCmd(0x01);
   709  0010D2  0E01               	movlw	1
   710  0010D4  EC3B  F00E         	call	_LCDCmd
   711  0010D8                     
   712                           ;eSafeMain.c: 57:       LCDGoto(1, 1);
   713  0010D8  0E01               	movlw	1
   714  0010DA  6E15               	movwf	LCDGoto@p_1^0,c
   715  0010DC  0E01               	movlw	1
   716  0010DE  EC9B  F00D         	call	_LCDGoto
   717  0010E2                     
   718                           ;eSafeMain.c: 58:       LCDStr("Set Password:");
   719  0010E2  0E42               	movlw	low STR_2
   720  0010E4  6E17               	movwf	LCDStr@str^0,c
   721  0010E6  0E10               	movlw	high STR_2
   722  0010E8  6E18               	movwf	(LCDStr@str+1)^0,c
   723  0010EA  ECD4  F00C         	call	_LCDStr	;wreg free
   724                           
   725                           ;eSafeMain.c: 59:       LCDGoto(1, 2);
   726  0010EE  0E02               	movlw	2
   727  0010F0  6E15               	movwf	LCDGoto@p_1^0,c
   728  0010F2  0E01               	movlw	1
   729  0010F4  EC9B  F00D         	call	_LCDGoto
   730  0010F8                     
   731                           ;eSafeMain.c: 60:       LCDStr("__-__-__");
   732  0010F8  0E74               	movlw	low STR_3
   733  0010FA  6E17               	movwf	LCDStr@str^0,c
   734  0010FC  0E10               	movlw	high STR_3
   735  0010FE  6E18               	movwf	(LCDStr@str+1)^0,c
   736  001100  ECD4  F00C         	call	_LCDStr	;wreg free
   737  001104                     
   738                           ;eSafeMain.c: 62:       result_ADC = 0;
   739  001104  0E00               	movlw	0
   740  001106  6E59               	movwf	_result_ADC^0,c
   741  001108                     
   742                           ;eSafeMain.c: 63:       digitEntryCount = 0;
   743  001108  0E00               	movlw	0
   744  00110A  6E5A               	movwf	_digitEntryCount^0,c
   745                           
   746                           ;eSafeMain.c: 65:       while (digitEntryCount < 4){
   747  00110C  EF94  F008         	goto	l2334
   748  001110                     l2328:
   749                           
   750                           ;eSafeMain.c: 66:           ADCON0 |= 0x02;
   751  001110  82C2               	bsf	194,1,c	;volatile
   752  001112                     
   753                           ;eSafeMain.c: 67:           _delay((unsigned long)((20)*(4000000L/4000000.0)));
   754  001112  0E06               	movlw	6
   755  001114                     u1077:
   756  001114  2EE8               	decfsz	wreg,f,c
   757  001116  D7FE               	bra	u1077
   758  001118  D000               	nop2	
   759  00111A                     
   760                           ;eSafeMain.c: 68:           displayNumbers (result_ADC, digitEntryCount);
   761  00111A  C059  F01B         	movff	_result_ADC,displayNumbers@value
   762  00111E  6A1C               	clrf	(displayNumbers@value+1)^0,c
   763  001120  C05A  F01D         	movff	_digitEntryCount,displayNumbers@digitNo
   764  001124  ECA6  F00B         	call	_displayNumbers	;wreg free
   765  001128                     l2334:
   766                           
   767                           ;eSafeMain.c: 65:       while (digitEntryCount < 4){
   768  001128  0E03               	movlw	3
   769  00112A  645A               	cpfsgt	_digitEntryCount^0,c
   770  00112C  EF9A  F008         	goto	u961
   771  001130  EF9C  F008         	goto	u960
   772  001134                     u961:
   773  001134  EF88  F008         	goto	l2328
   774  001138                     u960:
   775  001138                     
   776                           ;eSafeMain.c: 72:       for (int i = 0;i < 3; i++){
   777  001138  0E00               	movlw	0
   778  00113A  6E28               	movwf	(main@i+1)^0,c
   779  00113C  0E00               	movlw	0
   780  00113E  6E27               	movwf	main@i^0,c
   781  001140                     l2342:
   782                           
   783                           ;eSafeMain.c: 73:           passwordsSet[i] = passwordsAttempt[i];
   784  001140  0E4C               	movlw	low _passwordsAttempt
   785  001142  2427               	addwf	main@i^0,w,c
   786  001144  6ED9               	movwf	fsr2l,c
   787  001146  0E00               	movlw	high _passwordsAttempt
   788  001148  2028               	addwfc	(main@i+1)^0,w,c
   789  00114A  6EDA               	movwf	fsr2h,c
   790  00114C  0E49               	movlw	low _passwordsSet
   791  00114E  2427               	addwf	main@i^0,w,c
   792  001150  6EE1               	movwf	fsr1l,c
   793  001152  0E00               	movlw	high _passwordsSet
   794  001154  2028               	addwfc	(main@i+1)^0,w,c
   795  001156  6EE2               	movwf	fsr1h,c
   796  001158  CFDF FFE7          	movff	indf2,indf1
   797  00115C                     
   798                           ;eSafeMain.c: 74:       }
   799  00115C  4A27               	infsnz	main@i^0,f,c
   800  00115E  2A28               	incf	(main@i+1)^0,f,c
   801  001160  BE28               	btfsc	(main@i+1)^0,7,c
   802  001162  EFBC  F008         	goto	u971
   803  001166  5028               	movf	(main@i+1)^0,w,c
   804  001168  E109               	bnz	u970
   805  00116A  0E03               	movlw	3
   806  00116C  5C27               	subwf	main@i^0,w,c
   807  00116E  A0D8               	btfss	status,0,c
   808  001170  EFBC  F008         	goto	u971
   809  001174  EFBE  F008         	goto	u970
   810  001178                     u971:
   811  001178  EFA0  F008         	goto	l2342
   812  00117C                     u970:
   813  00117C                     
   814                           ;eSafeMain.c: 80:       safeState = 3;
   815  00117C  0E03               	movlw	3
   816  00117E  6E57               	movwf	_safeState^0,c
   817  001180                     
   818                           ;eSafeMain.c: 82:       init_TIMER0();
   819  001180  EC0A  F00E         	call	_init_TIMER0	;wreg free
   820  001184                     
   821                           ;eSafeMain.c: 83:       init_TIMER1();
   822  001184  EC58  F00E         	call	_init_TIMER1	;wreg free
   823                           
   824                           ;eSafeMain.c: 86:       downCounter90s = 90;
   825  001188  0E5A               	movlw	90
   826  00118A  6E44               	movwf	_downCounter90s^0,c
   827                           
   828                           ;eSafeMain.c: 88:       displayData[0] = 10;
   829  00118C  0E0A               	movlw	10
   830  00118E  6E45               	movwf	_displayData^0,c
   831                           
   832                           ;eSafeMain.c: 89:       displayData[1] = 11;
   833  001190  0E0B               	movlw	11
   834  001192  6E46               	movwf	(_displayData+1)^0,c
   835                           
   836                           ;eSafeMain.c: 90:       displayData[2] = 9;
   837  001194  0E09               	movlw	9
   838  001196  6E47               	movwf	(_displayData+2)^0,c
   839                           
   840                           ;eSafeMain.c: 91:       displayData[3] = 0;
   841  001198  0E00               	movlw	0
   842  00119A  6E48               	movwf	(_displayData+3)^0,c
   843  00119C                     
   844                           ;eSafeMain.c: 92:       TMR1ON = 1;
   845  00119C  80CD               	bsf	4045,0,c	;volatile
   846  00119E                     
   847                           ;eSafeMain.c: 95:       LCDCmd(0x01);
   848  00119E  0E01               	movlw	1
   849  0011A0  EC3B  F00E         	call	_LCDCmd
   850  0011A4                     
   851                           ;eSafeMain.c: 96:       LCDGoto(1, 1);
   852  0011A4  0E01               	movlw	1
   853  0011A6  6E15               	movwf	LCDGoto@p_1^0,c
   854  0011A8  0E01               	movlw	1
   855  0011AA  EC9B  F00D         	call	_LCDGoto
   856  0011AE                     
   857                           ;eSafeMain.c: 97:       LCDStr("Input Password:");
   858  0011AE  0E22               	movlw	low STR_4
   859  0011B0  6E17               	movwf	LCDStr@str^0,c
   860  0011B2  0E10               	movlw	high STR_4
   861  0011B4  6E18               	movwf	(LCDStr@str+1)^0,c
   862  0011B6  ECD4  F00C         	call	_LCDStr	;wreg free
   863  0011BA                     
   864                           ;eSafeMain.c: 98:       LCDGoto(1, 2);
   865  0011BA  0E02               	movlw	2
   866  0011BC  6E15               	movwf	LCDGoto@p_1^0,c
   867  0011BE  0E01               	movlw	1
   868  0011C0  EC9B  F00D         	call	_LCDGoto
   869  0011C4                     
   870                           ;eSafeMain.c: 99:       LCDStr("__-__-__");
   871  0011C4  0E74               	movlw	low STR_3
   872  0011C6  6E17               	movwf	LCDStr@str^0,c
   873  0011C8  0E10               	movlw	high STR_3
   874  0011CA  6E18               	movwf	(LCDStr@str+1)^0,c
   875  0011CC  ECD4  F00C         	call	_LCDStr	;wreg free
   876  0011D0                     
   877                           ;eSafeMain.c: 103:       start3 = 0;
   878  0011D0  0E00               	movlw	0
   879  0011D2  6E56               	movwf	_start3^0,c
   880  0011D4                     
   881                           ;eSafeMain.c: 104:       digitEntryCount = 0;
   882  0011D4  0E00               	movlw	0
   883  0011D6  6E5A               	movwf	_digitEntryCount^0,c
   884                           
   885                           ;eSafeMain.c: 105:       while (!start3){
   886  0011D8  EFF4  F008         	goto	l2376
   887  0011DC                     l2370:
   888                           
   889                           ;eSafeMain.c: 106:           ADCON0 |= 0x02;
   890  0011DC  82C2               	bsf	194,1,c	;volatile
   891  0011DE                     
   892                           ;eSafeMain.c: 107:           _delay((unsigned long)((20)*(4000000L/4000000.0)));
   893  0011DE  0E06               	movlw	6
   894  0011E0                     u1087:
   895  0011E0  2EE8               	decfsz	wreg,f,c
   896  0011E2  D7FE               	bra	u1087
   897  0011E4  D000               	nop2	
   898  0011E6                     
   899                           ;eSafeMain.c: 108:           INT0IE = 1;
   900  0011E6  88F2               	bsf	4082,4,c	;volatile
   901  0011E8                     l2376:
   902                           
   903                           ;eSafeMain.c: 105:       while (!start3){
   904  0011E8  5056               	movf	_start3^0,w,c
   905  0011EA  B4D8               	btfsc	status,2,c
   906  0011EC  EFFA  F008         	goto	u981
   907  0011F0  EFFC  F008         	goto	u980
   908  0011F4                     u981:
   909  0011F4  EFEE  F008         	goto	l2370
   910  0011F8                     u980:
   911  0011F8                     
   912                           ;eSafeMain.c: 111:       digitEntryCount = 1;
   913  0011F8  0E01               	movlw	1
   914  0011FA  6E5A               	movwf	_digitEntryCount^0,c
   915                           
   916                           ;eSafeMain.c: 112:       attemption = 3;
   917  0011FC  0E03               	movlw	3
   918  0011FE  6E29               	movwf	main@attemption^0,c
   919                           
   920                           ;eSafeMain.c: 113:       while (attemption){
   921  001200  EFAC  F009         	goto	l2434
   922  001204                     l2380:
   923                           
   924                           ;eSafeMain.c: 117:                   displayData[0] = 10;
   925  001204  0E0A               	movlw	10
   926  001206  6E45               	movwf	_displayData^0,c
   927                           
   928                           ;eSafeMain.c: 118:                   displayData[1] = 13;
   929  001208  0E0D               	movlw	13
   930  00120A  6E46               	movwf	(_displayData+1)^0,c
   931                           
   932                           ;eSafeMain.c: 121:               break;
   933  00120C  EF2C  F009         	goto	l2388
   934  001210                     l2382:
   935                           
   936                           ;eSafeMain.c: 124:                   blinkEnable = 1;
   937  001210  0E01               	movlw	1
   938  001212  6E55               	movwf	_blinkEnable^0,c
   939                           
   940                           ;eSafeMain.c: 125:                   displayData[0] = 10;
   941  001214  0E0A               	movlw	10
   942  001216  6E45               	movwf	_displayData^0,c
   943                           
   944                           ;eSafeMain.c: 126:                   displayData[1] = 12;
   945  001218  0E0C               	movlw	12
   946  00121A  6E46               	movwf	(_displayData+1)^0,c
   947                           
   948                           ;eSafeMain.c: 127:               break;
   949  00121C  EF2C  F009         	goto	l2388
   950  001220                     l315:
   951                           
   952                           ;eSafeMain.c: 130:                   TMR0ON = 1;
   953  001220  8ED5               	bsf	4053,7,c	;volatile
   954                           
   955                           ;eSafeMain.c: 131:               break;
   956  001222  EF2C  F009         	goto	l2388
   957  001226                     l2386:
   958  001226  5029               	movf	main@attemption^0,w,c
   959  001228  6E22               	movwf	??_main^0,c
   960  00122A  6A23               	clrf	(??_main+1)^0,c
   961                           
   962                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   963                           ; Switch size 1, requested type "simple"
   964                           ; Number of cases is 1, Range of values is 0 to 0
   965                           ; switch strategies available:
   966                           ; Name         Instructions Cycles
   967                           ; simple_byte            4     3 (average)
   968                           ;	Chosen strategy is simple_byte
   969  00122C  5023               	movf	(??_main+1)^0,w,c
   970  00122E  0A00               	xorlw	0	; case 0
   971  001230  B4D8               	btfsc	status,2,c
   972  001232  EF1D  F009         	goto	l2500
   973  001236  EF2C  F009         	goto	l2388
   974  00123A                     l2500:
   975                           
   976                           ; Switch size 1, requested type "simple"
   977                           ; Number of cases is 3, Range of values is 1 to 3
   978                           ; switch strategies available:
   979                           ; Name         Instructions Cycles
   980                           ; simple_byte           10     6 (average)
   981                           ;	Chosen strategy is simple_byte
   982  00123A  5022               	movf	??_main^0,w,c
   983  00123C  0A01               	xorlw	1	; case 1
   984  00123E  B4D8               	btfsc	status,2,c
   985  001240  EF02  F009         	goto	l2380
   986  001244  0A03               	xorlw	3	; case 2
   987  001246  B4D8               	btfsc	status,2,c
   988  001248  EF08  F009         	goto	l2382
   989  00124C  0A01               	xorlw	1	; case 3
   990  00124E  B4D8               	btfsc	status,2,c
   991  001250  EF10  F009         	goto	l315
   992  001254  EF2C  F009         	goto	l2388
   993  001258                     l2388:
   994                           
   995                           ;eSafeMain.c: 139:           digitEntryCount = 1;
   996  001258  0E01               	movlw	1
   997  00125A  6E5A               	movwf	_digitEntryCount^0,c
   998                           
   999                           ;eSafeMain.c: 140:           while (digitEntryCount < 4){
  1000  00125C  EF75  F009         	goto	l2414
  1001  001260                     l2390:
  1002                           
  1003                           ;eSafeMain.c: 141:                config_ADC_Potentiometer();
  1004  001260  EC75  F00E         	call	_config_ADC_Potentiometer	;wreg free
  1005  001264                     
  1006                           ;eSafeMain.c: 142:                ADCON0 |= 0x02;
  1007  001264  82C2               	bsf	194,1,c	;volatile
  1008  001266                     
  1009                           ;eSafeMain.c: 143:                _delay((unsigned long)((20)*(4000000L/4000000.0)));
  1010  001266  0E06               	movlw	6
  1011  001268                     u1097:
  1012  001268  2EE8               	decfsz	wreg,f,c
  1013  00126A  D7FE               	bra	u1097
  1014  00126C  D000               	nop2	
  1015  00126E                     
  1016                           ;eSafeMain.c: 146:                displayNumbers (result_ADC, digitEntryCount);
  1017  00126E  C059  F01B         	movff	_result_ADC,displayNumbers@value
  1018  001272  6A1C               	clrf	(displayNumbers@value+1)^0,c
  1019  001274  C05A  F01D         	movff	_digitEntryCount,displayNumbers@digitNo
  1020  001278  ECA6  F00B         	call	_displayNumbers	;wreg free
  1021  00127C                     
  1022                           ;eSafeMain.c: 149:                if (attemption == 1) {
  1023  00127C  0429               	decf	main@attemption^0,w,c
  1024  00127E  A4D8               	btfss	status,2,c
  1025  001280  EF44  F009         	goto	u991
  1026  001284  EF46  F009         	goto	u990
  1027  001288                     u991:
  1028  001288  EF75  F009         	goto	l2414
  1029  00128C                     u990:
  1030  00128C                     
  1031                           ;eSafeMain.c: 150:                   config_ADC_Thermometer ();
  1032  00128C  EC6C  F00E         	call	_config_ADC_Thermometer	;wreg free
  1033  001290                     
  1034                           ;eSafeMain.c: 151:                   ADCON0 |= 0x02;
  1035  001290  82C2               	bsf	194,1,c	;volatile
  1036  001292                     
  1037                           ;eSafeMain.c: 152:                   _delay((unsigned long)((20)*(4000000L/4000000.0)));
  1038  001292  0E06               	movlw	6
  1039  001294                     u1107:
  1040  001294  2EE8               	decfsz	wreg,f,c
  1041  001296  D7FE               	bra	u1107
  1042  001298  D000               	nop2	
  1043  00129A                     
  1044                           ;eSafeMain.c: 153:                   heaterTemperature = ((result_ADC * 5) / 1024) * 100
      +                          ;
  1045  00129A  5059               	movf	_result_ADC^0,w,c
  1046  00129C  0D05               	mullw	5
  1047  00129E  CFF3 F013          	movff	prodl,___awdiv@dividend
  1048  0012A2  CFF4 F014          	movff	prodh,___awdiv@dividend+1
  1049  0012A6  0E04               	movlw	4
  1050  0012A8  6E16               	movwf	(___awdiv@divisor+1)^0,c
  1051  0012AA  0E00               	movlw	0
  1052  0012AC  6E15               	movwf	___awdiv@divisor^0,c
  1053  0012AE  EC10  F00C         	call	___awdiv	;wreg free
  1054  0012B2  5013               	movf	?___awdiv^0,w,c
  1055  0012B4  0D64               	mullw	100
  1056  0012B6  CFF3 F026          	movff	prodl,main@heaterTemperature
  1057  0012BA                     
  1058                           ;eSafeMain.c: 154:                   if (heaterTemperature > 40){
  1059  0012BA  0E28               	movlw	40
  1060  0012BC  6426               	cpfsgt	main@heaterTemperature^0,c
  1061  0012BE  EF63  F009         	goto	u1001
  1062  0012C2  EF65  F009         	goto	u1000
  1063  0012C6                     u1001:
  1064  0012C6  EF69  F009         	goto	l320
  1065  0012CA                     u1000:
  1066  0012CA                     
  1067                           ;eSafeMain.c: 156:                       attemption = 0;
  1068  0012CA  0E00               	movlw	0
  1069  0012CC  6E29               	movwf	main@attemption^0,c
  1070                           
  1071                           ;eSafeMain.c: 157:                       safeState = 5;
  1072  0012CE  0E05               	movlw	5
  1073  0012D0  6E57               	movwf	_safeState^0,c
  1074  0012D2                     l320:
  1075                           
  1076                           ;eSafeMain.c: 160:                   if (downCounter90s == 0){
  1077  0012D2  5044               	movf	_downCounter90s^0,w,c
  1078  0012D4  A4D8               	btfss	status,2,c
  1079  0012D6  EF6F  F009         	goto	u1011
  1080  0012DA  EF71  F009         	goto	u1010
  1081  0012DE                     u1011:
  1082  0012DE  EF75  F009         	goto	l2414
  1083  0012E2                     u1010:
  1084  0012E2                     
  1085                           ;eSafeMain.c: 162:                       attemption = 0;
  1086  0012E2  0E00               	movlw	0
  1087  0012E4  6E29               	movwf	main@attemption^0,c
  1088                           
  1089                           ;eSafeMain.c: 163:                       safeState = 5;
  1090  0012E6  0E05               	movlw	5
  1091  0012E8  6E57               	movwf	_safeState^0,c
  1092  0012EA                     l2414:
  1093                           
  1094                           ;eSafeMain.c: 140:           while (digitEntryCount < 4){
  1095  0012EA  0E03               	movlw	3
  1096  0012EC  645A               	cpfsgt	_digitEntryCount^0,c
  1097  0012EE  EF7B  F009         	goto	u1021
  1098  0012F2  EF7D  F009         	goto	u1020
  1099  0012F6                     u1021:
  1100  0012F6  EF30  F009         	goto	l2390
  1101  0012FA                     u1020:
  1102  0012FA                     
  1103                           ;eSafeMain.c: 169:           isValid = passwordCheck();
  1104  0012FA  EC53  F00D         	call	_passwordCheck	;wreg free
  1105  0012FE  C013  F024         	movff	?_passwordCheck,main@isValid
  1106  001302  C014  F025         	movff	?_passwordCheck+1,main@isValid+1
  1107  001306                     
  1108                           ;eSafeMain.c: 170:           if (isValid){
  1109  001306  5024               	movf	main@isValid^0,w,c
  1110  001308  1025               	iorwf	(main@isValid+1)^0,w,c
  1111  00130A  B4D8               	btfsc	status,2,c
  1112  00130C  EF8A  F009         	goto	u1031
  1113  001310  EF8C  F009         	goto	u1030
  1114  001314                     u1031:
  1115  001314  EF92  F009         	goto	l2422
  1116  001318                     u1030:
  1117  001318                     
  1118                           ;eSafeMain.c: 172:               attemption = 0;
  1119  001318  0E00               	movlw	0
  1120  00131A  6E29               	movwf	main@attemption^0,c
  1121                           
  1122                           ;eSafeMain.c: 173:               safeState = 4;
  1123  00131C  0E04               	movlw	4
  1124  00131E  6E57               	movwf	_safeState^0,c
  1125                           
  1126                           ;eSafeMain.c: 174:           }
  1127  001320  EFAC  F009         	goto	l2434
  1128  001324                     l2422:
  1129                           
  1130                           ;eSafeMain.c: 177:               attemption--;
  1131  001324  0629               	decf	main@attemption^0,f,c
  1132  001326                     
  1133                           ;eSafeMain.c: 178:               LCDCmd(0x01);
  1134  001326  0E01               	movlw	1
  1135  001328  EC3B  F00E         	call	_LCDCmd
  1136  00132C                     
  1137                           ;eSafeMain.c: 179:               LCDGoto(1, 1);
  1138  00132C  0E01               	movlw	1
  1139  00132E  6E15               	movwf	LCDGoto@p_1^0,c
  1140  001330  0E01               	movlw	1
  1141  001332  EC9B  F00D         	call	_LCDGoto
  1142  001336                     
  1143                           ;eSafeMain.c: 181:               LCDStr("Try Again:");
  1144  001336  0E69               	movlw	low STR_6
  1145  001338  6E17               	movwf	LCDStr@str^0,c
  1146  00133A  0E10               	movlw	high STR_6
  1147  00133C  6E18               	movwf	(LCDStr@str+1)^0,c
  1148  00133E  ECD4  F00C         	call	_LCDStr	;wreg free
  1149  001342                     
  1150                           ;eSafeMain.c: 182:               LCDGoto(1, 2);
  1151  001342  0E02               	movlw	2
  1152  001344  6E15               	movwf	LCDGoto@p_1^0,c
  1153  001346  0E01               	movlw	1
  1154  001348  EC9B  F00D         	call	_LCDGoto
  1155  00134C                     
  1156                           ;eSafeMain.c: 183:               LCDStr("__-__-__");
  1157  00134C  0E74               	movlw	low STR_3
  1158  00134E  6E17               	movwf	LCDStr@str^0,c
  1159  001350  0E10               	movlw	high STR_3
  1160  001352  6E18               	movwf	(LCDStr@str+1)^0,c
  1161  001354  ECD4  F00C         	call	_LCDStr	;wreg free
  1162  001358                     l2434:
  1163                           
  1164                           ;eSafeMain.c: 113:       while (attemption){
  1165  001358  5029               	movf	main@attemption^0,w,c
  1166  00135A  A4D8               	btfss	status,2,c
  1167  00135C  EFB2  F009         	goto	u1041
  1168  001360  EFB4  F009         	goto	u1040
  1169  001364                     u1041:
  1170  001364  EF13  F009         	goto	l2386
  1171  001368                     u1040:
  1172  001368                     
  1173                           ;eSafeMain.c: 189:       TMR0ON = 0;
  1174  001368  9ED5               	bcf	4053,7,c	;volatile
  1175  00136A                     
  1176                           ;eSafeMain.c: 190:       displayData[0] = 10;
  1177  00136A  0E0A               	movlw	10
  1178  00136C  6E45               	movwf	_displayData^0,c
  1179                           
  1180                           ;eSafeMain.c: 191:       displayData[1] = 10;
  1181  00136E  0E0A               	movlw	10
  1182  001370  6E46               	movwf	(_displayData+1)^0,c
  1183                           
  1184                           ;eSafeMain.c: 192:       displayData[2] = 10;
  1185  001372  0E0A               	movlw	10
  1186  001374  6E47               	movwf	(_displayData+2)^0,c
  1187                           
  1188                           ;eSafeMain.c: 193:       displayData[3] = 10;
  1189  001376  0E0A               	movlw	10
  1190  001378  6E48               	movwf	(_displayData+3)^0,c
  1191                           
  1192                           ;eSafeMain.c: 195:       blinkEnable = 0;
  1193  00137A  0E00               	movlw	0
  1194  00137C  6E55               	movwf	_blinkEnable^0,c
  1195                           
  1196                           ;eSafeMain.c: 196:       PORTB &= 0x00;
  1197  00137E  0E00               	movlw	0
  1198  001380  6E81               	movwf	129,c	;volatile
  1199                           
  1200                           ;eSafeMain.c: 197:       TRISB = 0x11;
  1201  001382  0E11               	movlw	17
  1202  001384  6E93               	movwf	147,c	;volatile
  1203  001386                     
  1204                           ;eSafeMain.c: 201:       ADIE = 0;
  1205  001386  9C9D               	bcf	3997,6,c	;volatile
  1206  001388                     
  1207                           ;eSafeMain.c: 202:       INT0IE = 0;
  1208  001388  98F2               	bcf	4082,4,c	;volatile
  1209  00138A                     
  1210                           ;eSafeMain.c: 203:       RBIE = 0;
  1211  00138A  96F2               	bcf	4082,3,c	;volatile
  1212  00138C                     
  1213                           ;eSafeMain.c: 204:       TMR0IE = 0;
  1214  00138C  9AF2               	bcf	4082,5,c	;volatile
  1215  00138E                     
  1216                           ;eSafeMain.c: 205:       TMR1IE = 0;
  1217  00138E  909D               	bcf	3997,0,c	;volatile
  1218  001390                     
  1219                           ;eSafeMain.c: 206:       TMR0ON = 0;
  1220  001390  9ED5               	bcf	4053,7,c	;volatile
  1221  001392                     
  1222                           ;eSafeMain.c: 207:       TMR0ON = 0;
  1223  001392  9ED5               	bcf	4053,7,c	;volatile
  1224  001394                     
  1225                           ;eSafeMain.c: 209:       if (safeState == 4){
  1226  001394  0E04               	movlw	4
  1227  001396  1857               	xorwf	_safeState^0,w,c
  1228  001398  A4D8               	btfss	status,2,c
  1229  00139A  EFD1  F009         	goto	u1051
  1230  00139E  EFD3  F009         	goto	u1050
  1231  0013A2                     u1051:
  1232  0013A2  EFEE  F009         	goto	l2464
  1233  0013A6                     u1050:
  1234  0013A6                     
  1235                           ;eSafeMain.c: 210:           LCDCmd(0x01);
  1236  0013A6  0E01               	movlw	1
  1237  0013A8  EC3B  F00E         	call	_LCDCmd
  1238  0013AC                     
  1239                           ;eSafeMain.c: 211:           LCDGoto(1, 1);
  1240  0013AC  0E01               	movlw	1
  1241  0013AE  6E15               	movwf	LCDGoto@p_1^0,c
  1242  0013B0  0E01               	movlw	1
  1243  0013B2  EC9B  F00D         	call	_LCDGoto
  1244  0013B6                     
  1245                           ;eSafeMain.c: 212:           LCDStr("Unlocked; Press");
  1246  0013B6  0E32               	movlw	low STR_8
  1247  0013B8  6E17               	movwf	LCDStr@str^0,c
  1248  0013BA  0E10               	movlw	high STR_8
  1249  0013BC  6E18               	movwf	(LCDStr@str+1)^0,c
  1250  0013BE  ECD4  F00C         	call	_LCDStr	;wreg free
  1251  0013C2                     
  1252                           ;eSafeMain.c: 213:           LCDGoto(1, 2);
  1253  0013C2  0E02               	movlw	2
  1254  0013C4  6E15               	movwf	LCDGoto@p_1^0,c
  1255  0013C6  0E01               	movlw	1
  1256  0013C8  EC9B  F00D         	call	_LCDGoto
  1257  0013CC                     
  1258                           ;eSafeMain.c: 214:           LCDStr("RB4 to lock!");
  1259  0013CC  0E50               	movlw	low STR_9
  1260  0013CE  6E17               	movwf	LCDStr@str^0,c
  1261  0013D0  0E10               	movlw	high STR_9
  1262  0013D2  6E18               	movwf	(LCDStr@str+1)^0,c
  1263  0013D4  ECD4  F00C         	call	_LCDStr	;wreg free
  1264                           
  1265                           ;eSafeMain.c: 215:       }
  1266  0013D8  EFFC  F009         	goto	l2470
  1267  0013DC                     l2464:
  1268                           
  1269                           ;eSafeMain.c: 218:           LCDCmd(0x01);
  1270  0013DC  0E01               	movlw	1
  1271  0013DE  EC3B  F00E         	call	_LCDCmd
  1272  0013E2                     
  1273                           ;eSafeMain.c: 219:           LCDGoto(1, 1);
  1274  0013E2  0E01               	movlw	1
  1275  0013E4  6E15               	movwf	LCDGoto@p_1^0,c
  1276  0013E6  0E01               	movlw	1
  1277  0013E8  EC9B  F00D         	call	_LCDGoto
  1278  0013EC                     
  1279                           ;eSafeMain.c: 220:           LCDStr("You Failed!");
  1280  0013EC  0E5D               	movlw	low STR_10
  1281  0013EE  6E17               	movwf	LCDStr@str^0,c
  1282  0013F0  0E10               	movlw	high STR_10
  1283  0013F2  6E18               	movwf	(LCDStr@str+1)^0,c
  1284  0013F4  ECD4  F00C         	call	_LCDStr	;wreg free
  1285  0013F8                     l2470:
  1286                           
  1287                           ;eSafeMain.c: 223:      TRISB |= 0x04;
  1288  0013F8  8493               	bsf	147,2,c	;volatile
  1289  0013FA                     
  1290                           ;eSafeMain.c: 224:      RBIE = 1;
  1291  0013FA  86F2               	bsf	4082,3,c	;volatile
  1292  0013FC                     l2474:
  1293                           
  1294                           ;eSafeMain.c: 226:       while(!lockAgain){
  1295  0013FC  504F               	movf	_lockAgain^0,w,c
  1296  0013FE  1050               	iorwf	(_lockAgain+1)^0,w,c
  1297  001400  B4D8               	btfsc	status,2,c
  1298  001402  EF05  F00A         	goto	u1061
  1299  001406  EF07  F00A         	goto	u1060
  1300  00140A                     u1061:
  1301  00140A  EFFE  F009         	goto	l2474
  1302  00140E                     u1060:
  1303  00140E                     
  1304                           ;eSafeMain.c: 229:       LCDCmd(0x01);
  1305  00140E  0E01               	movlw	1
  1306  001410  EC3B  F00E         	call	_LCDCmd
  1307  001414                     
  1308                           ;eSafeMain.c: 230:       LCDGoto(1, 1);
  1309  001414  0E01               	movlw	1
  1310  001416  6E15               	movwf	LCDGoto@p_1^0,c
  1311  001418  0E01               	movlw	1
  1312  00141A  EC9B  F00D         	call	_LCDGoto
  1313  00141E                     
  1314                           ;eSafeMain.c: 231:       LCDStr("Safe is Locked!");
  1315  00141E  0E12               	movlw	low STR_11
  1316  001420  6E17               	movwf	LCDStr@str^0,c
  1317  001422  0E10               	movlw	high STR_11
  1318  001424  6E18               	movwf	(LCDStr@str+1)^0,c
  1319  001426  ECD4  F00C         	call	_LCDStr	;wreg free
  1320  00142A                     
  1321                           ;eSafeMain.c: 232:       delayWithTimer2 (3000);
  1322  00142A  0E0B               	movlw	11
  1323  00142C  6E14               	movwf	(delayWithTimer2@milliseconds+1)^0,c
  1324  00142E  0EB8               	movlw	184
  1325  001430  6E13               	movwf	delayWithTimer2@milliseconds^0,c
  1326  001432  ECCE  F00D         	call	_delayWithTimer2	;wreg free
  1327  001436  EF4D  F008         	goto	l300
  1328  00143A  EF07  F000         	goto	start
  1329  00143E                     __end_of_main:
  1330                           	callstack 0
  1331                           
  1332 ;; *************** function _passwordCheck *****************
  1333 ;; Defined at:
  1334 ;;		line 243 in file "eSafeMain.c"
  1335 ;; Parameters:    Size  Location     Type
  1336 ;;		None
  1337 ;; Auto vars:     Size  Location     Type
  1338 ;;  n               1   22[COMRAM] unsigned char 
  1339 ;; Return value:  Size  Location     Type
  1340 ;;                  2   18[COMRAM] int 
  1341 ;; Registers used:
  1342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1343 ;; Tracked objects:
  1344 ;;		On entry : 0/0
  1345 ;;		On exit  : 0/0
  1346 ;;		Unchanged: 0/0
  1347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1351 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1352 ;;Total ram usage:        5 bytes
  1353 ;; Hardware stack levels used: 1
  1354 ;; Hardware stack levels required when called: 2
  1355 ;; This function calls:
  1356 ;;		Nothing
  1357 ;; This function is called by:
  1358 ;;		_main
  1359 ;; This function uses a non-reentrant model
  1360 ;;
  1361                           
  1362                           	psect	text1
  1363  001AA6                     __ptext1:
  1364                           	callstack 0
  1365  001AA6                     _passwordCheck:
  1366                           	callstack 28
  1367  001AA6                     
  1368                           ;eSafeMain.c: 244:     byte n;;eSafeMain.c: 246:     for (n = 0; n < 3; n++){
  1369  001AA6  0E00               	movlw	0
  1370  001AA8  6E17               	movwf	passwordCheck@n^0,c
  1371  001AAA                     l2066:
  1372                           
  1373                           ;eSafeMain.c: 247:         if (passwordsSet[n] != passwordsAttempt[n]){
  1374  001AAA  0E4C               	movlw	low _passwordsAttempt
  1375  001AAC  2417               	addwf	passwordCheck@n^0,w,c
  1376  001AAE  6ED9               	movwf	fsr2l,c
  1377  001AB0  6ADA               	clrf	fsr2h,c
  1378  001AB2  0E00               	movlw	high _passwordsAttempt
  1379  001AB4  22DA               	addwfc	fsr2h,f,c
  1380  001AB6  0E49               	movlw	low _passwordsSet
  1381  001AB8  2417               	addwf	passwordCheck@n^0,w,c
  1382  001ABA  6EE1               	movwf	fsr1l,c
  1383  001ABC  6AE2               	clrf	fsr1h,c
  1384  001ABE  0E00               	movlw	high _passwordsSet
  1385  001AC0  22E2               	addwfc	fsr1h,f,c
  1386  001AC2  50DE               	movf	postinc2,w,c
  1387  001AC4  18E6               	xorwf	postinc1,w,c
  1388  001AC6  B4D8               	btfsc	status,2,c
  1389  001AC8  EF68  F00D         	goto	u661
  1390  001ACC  EF6A  F00D         	goto	u660
  1391  001AD0                     u661:
  1392  001AD0  EF70  F00D         	goto	l2072
  1393  001AD4                     u660:
  1394  001AD4                     
  1395                           ;eSafeMain.c: 248:             return 0;
  1396  001AD4  0E00               	movlw	0
  1397  001AD6  6E14               	movwf	(?_passwordCheck+1)^0,c
  1398  001AD8  0E00               	movlw	0
  1399  001ADA  6E13               	movwf	?_passwordCheck^0,c
  1400  001ADC  EF7D  F00D         	goto	l339
  1401  001AE0                     l2072:
  1402                           
  1403                           ;eSafeMain.c: 250:     }
  1404  001AE0  2A17               	incf	passwordCheck@n^0,f,c
  1405  001AE2  0E02               	movlw	2
  1406  001AE4  6417               	cpfsgt	passwordCheck@n^0,c
  1407  001AE6  EF77  F00D         	goto	u671
  1408  001AEA  EF79  F00D         	goto	u670
  1409  001AEE                     u671:
  1410  001AEE  EF55  F00D         	goto	l2066
  1411  001AF2                     u670:
  1412  001AF2                     
  1413                           ;eSafeMain.c: 251:     return 1;
  1414  001AF2  0E00               	movlw	0
  1415  001AF4  6E14               	movwf	(?_passwordCheck+1)^0,c
  1416  001AF6  0E01               	movlw	1
  1417  001AF8  6E13               	movwf	?_passwordCheck^0,c
  1418  001AFA                     l339:
  1419  001AFA  0012               	return		;funcret
  1420  001AFC                     __end_of_passwordCheck:
  1421                           	callstack 0
  1422                           
  1423 ;; *************** function _init_TIMER2 *****************
  1424 ;; Defined at:
  1425 ;;		line 92 in file "./timers.h"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		wreg, status,2
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; Hardware stack levels required when called: 2
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text2
  1454  001C36                     __ptext2:
  1455                           	callstack 0
  1456  001C36                     _init_TIMER2:
  1457                           	callstack 28
  1458  001C36                     
  1459                           ;./timers.h: 94:     T2CON = 0x7B;
  1460  001C36  0E7B               	movlw	123
  1461  001C38  6ECA               	movwf	202,c	;volatile
  1462                           
  1463                           ;./timers.h: 95:     PR2 = 0x28;
  1464  001C3A  0E28               	movlw	40
  1465  001C3C  6ECB               	movwf	203,c	;volatile
  1466                           
  1467                           ;./timers.h: 96:     TMR2 = 0x00;
  1468  001C3E  0E00               	movlw	0
  1469  001C40  6ECC               	movwf	204,c	;volatile
  1470  001C42                     
  1471                           ;./timers.h: 97:     PIR1bits.TMR2IF = 0;
  1472  001C42  929E               	bcf	158,1,c	;volatile
  1473  001C44                     
  1474                           ;./timers.h: 98:     TMR2ON = 0;
  1475  001C44  94CA               	bcf	4042,2,c	;volatile
  1476  001C46                     
  1477                           ;./timers.h: 99:     TMR2IE = 1;
  1478  001C46  829D               	bsf	3997,1,c	;volatile
  1479  001C48                     
  1480                           ;./timers.h: 100:     GIE = 1;
  1481  001C48  8EF2               	bsf	4082,7,c	;volatile
  1482  001C4A                     
  1483                           ;./timers.h: 101:     PEIE = 1;
  1484  001C4A  8CF2               	bsf	4082,6,c	;volatile
  1485                           
  1486                           ;./timers.h: 102:     TMR2Counter = 0;
  1487  001C4C  0E00               	movlw	0
  1488  001C4E  6E52               	movwf	(_TMR2Counter+1)^0,c
  1489  001C50  0E00               	movlw	0
  1490  001C52  6E51               	movwf	_TMR2Counter^0,c
  1491  001C54  0012               	return		;funcret
  1492  001C56                     __end_of_init_TIMER2:
  1493                           	callstack 0
  1494                           
  1495 ;; *************** function _init_TIMER1 *****************
  1496 ;; Defined at:
  1497 ;;		line 60 in file "./timers.h"
  1498 ;; Parameters:    Size  Location     Type
  1499 ;;		None
  1500 ;; Auto vars:     Size  Location     Type
  1501 ;;		None
  1502 ;; Return value:  Size  Location     Type
  1503 ;;                  1    wreg      void 
  1504 ;; Registers used:
  1505 ;;		wreg, status,2
  1506 ;; Tracked objects:
  1507 ;;		On entry : 0/0
  1508 ;;		On exit  : 0/0
  1509 ;;		Unchanged: 0/0
  1510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1515 ;;Total ram usage:        0 bytes
  1516 ;; Hardware stack levels used: 1
  1517 ;; Hardware stack levels required when called: 2
  1518 ;; This function calls:
  1519 ;;		Nothing
  1520 ;; This function is called by:
  1521 ;;		_main
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text3
  1526  001CB0                     __ptext3:
  1527                           	callstack 0
  1528  001CB0                     _init_TIMER1:
  1529                           	callstack 28
  1530  001CB0                     
  1531                           ;./timers.h: 62:     T1CON = 0;
  1532  001CB0  0E00               	movlw	0
  1533  001CB2  6ECD               	movwf	205,c	;volatile
  1534  001CB4                     
  1535                           ;./timers.h: 63:     TMR1ON = 0;
  1536  001CB4  90CD               	bcf	4045,0,c	;volatile
  1537  001CB6                     
  1538                           ;./timers.h: 64:     T1OSCEN = 0;
  1539  001CB6  96CD               	bcf	4045,3,c	;volatile
  1540  001CB8                     
  1541                           ;./timers.h: 65:     TMR1CS = 0;
  1542  001CB8  92CD               	bcf	4045,1,c	;volatile
  1543  001CBA                     
  1544                           ;./timers.h: 67:     T1CKPS0 = 0;
  1545  001CBA  98CD               	bcf	4045,4,c	;volatile
  1546  001CBC                     
  1547                           ;./timers.h: 68:     T1CKPS1 = 1;
  1548  001CBC  8ACD               	bsf	4045,5,c	;volatile
  1549  001CBE                     
  1550                           ;./timers.h: 69:     TMR1IE = 1;
  1551  001CBE  809D               	bsf	3997,0,c	;volatile
  1552  001CC0                     
  1553                           ;./timers.h: 70:     GIE = 1;
  1554  001CC0  8EF2               	bsf	4082,7,c	;volatile
  1555  001CC2                     
  1556                           ;./timers.h: 71:     PEIE = 1;
  1557  001CC2  8CF2               	bsf	4082,6,c	;volatile
  1558  001CC4  0012               	return		;funcret
  1559  001CC6                     __end_of_init_TIMER1:
  1560                           	callstack 0
  1561                           
  1562 ;; *************** function _init_TIMER0 *****************
  1563 ;; Defined at:
  1564 ;;		line 40 in file "./timers.h"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;		None
  1567 ;; Auto vars:     Size  Location     Type
  1568 ;;		None
  1569 ;; Return value:  Size  Location     Type
  1570 ;;                  1    wreg      void 
  1571 ;; Registers used:
  1572 ;;		wreg, status,2
  1573 ;; Tracked objects:
  1574 ;;		On entry : 0/0
  1575 ;;		On exit  : 0/0
  1576 ;;		Unchanged: 0/0
  1577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1582 ;;Total ram usage:        0 bytes
  1583 ;; Hardware stack levels used: 1
  1584 ;; Hardware stack levels required when called: 2
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_main
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           	psect	text4
  1593  001C14                     __ptext4:
  1594                           	callstack 0
  1595  001C14                     _init_TIMER0:
  1596                           	callstack 28
  1597  001C14                     
  1598                           ;./timers.h: 41:     T0CON = 0;
  1599  001C14  0E00               	movlw	0
  1600  001C16  6ED5               	movwf	213,c	;volatile
  1601  001C18                     
  1602                           ;./timers.h: 42:     TMR0ON = 0;
  1603  001C18  9ED5               	bcf	4053,7,c	;volatile
  1604  001C1A                     
  1605                           ;./timers.h: 43:     T08BIT = 0;
  1606  001C1A  9CD5               	bcf	4053,6,c	;volatile
  1607  001C1C                     
  1608                           ;./timers.h: 44:     T0CS = 0;
  1609  001C1C  9AD5               	bcf	4053,5,c	;volatile
  1610  001C1E                     
  1611                           ;./timers.h: 45:     PSA = 0;
  1612  001C1E  96D5               	bcf	4053,3,c	;volatile
  1613  001C20                     
  1614                           ;./timers.h: 46:     T0PS0 = 0;
  1615  001C20  90D5               	bcf	4053,0,c	;volatile
  1616  001C22                     
  1617                           ;./timers.h: 47:     T0PS1 = 1;
  1618  001C22  82D5               	bsf	4053,1,c	;volatile
  1619  001C24                     
  1620                           ;./timers.h: 48:     T0PS2 = 1;
  1621  001C24  84D5               	bsf	4053,2,c	;volatile
  1622  001C26                     
  1623                           ;./timers.h: 49:     TMR0IE = 1;
  1624  001C26  8AF2               	bsf	4082,5,c	;volatile
  1625  001C28                     
  1626                           ;./timers.h: 50:     GIE = 1;
  1627  001C28  8EF2               	bsf	4082,7,c	;volatile
  1628  001C2A                     
  1629                           ;./timers.h: 51:     PEIE = 1;
  1630  001C2A  8CF2               	bsf	4082,6,c	;volatile
  1631  001C2C                     
  1632                           ;./timers.h: 53:     TMR0H = (unsigned char)(TIM0LOAD >> 8);
  1633  001C2C  C03F  FFD7         	movff	_TIM0LOAD+1,4055	;volatile
  1634  001C30                     
  1635                           ;./timers.h: 54:     TMR0L = (unsigned char)(TIM0LOAD - (TMR1H << 8));
  1636  001C30  C03E  FFD6         	movff	_TIM0LOAD,4054	;volatile
  1637  001C34  0012               	return		;funcret
  1638  001C36                     __end_of_init_TIMER0:
  1639                           	callstack 0
  1640                           
  1641 ;; *************** function _init_PORTB *****************
  1642 ;; Defined at:
  1643 ;;		line 301 in file "eSafeMain.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;		None
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;		None
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, status,2
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;Total ram usage:        0 bytes
  1662 ;; Hardware stack levels used: 1
  1663 ;; Hardware stack levels required when called: 2
  1664 ;; This function calls:
  1665 ;;		Nothing
  1666 ;; This function is called by:
  1667 ;;		_main
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text5
  1672  001CC6                     __ptext5:
  1673                           	callstack 0
  1674  001CC6                     _init_PORTB:
  1675                           	callstack 28
  1676  001CC6                     
  1677                           ;eSafeMain.c: 302:     TRISB = 0x11;
  1678  001CC6  0E11               	movlw	17
  1679  001CC8  6E93               	movwf	147,c	;volatile
  1680  001CCA                     
  1681                           ;eSafeMain.c: 303:     RBPU = 0;
  1682  001CCA  9EF1               	bcf	4081,7,c	;volatile
  1683  001CCC                     
  1684                           ;eSafeMain.c: 304:     RBIP = 1;
  1685  001CCC  80F1               	bsf	4081,0,c	;volatile
  1686  001CCE                     
  1687                           ;eSafeMain.c: 305:     INT0IE = 1;
  1688  001CCE  88F2               	bsf	4082,4,c	;volatile
  1689  001CD0                     
  1690                           ;eSafeMain.c: 306:     RBIE = 0;
  1691  001CD0  96F2               	bcf	4082,3,c	;volatile
  1692  001CD2                     
  1693                           ;eSafeMain.c: 307:     GIE = 1;
  1694  001CD2  8EF2               	bsf	4082,7,c	;volatile
  1695  001CD4                     
  1696                           ;eSafeMain.c: 308:     PEIE = 1;
  1697  001CD4  8CF2               	bsf	4082,6,c	;volatile
  1698  001CD6  0012               	return		;funcret
  1699  001CD8                     __end_of_init_PORTB:
  1700                           	callstack 0
  1701                           
  1702 ;; *************** function _init_Clock *****************
  1703 ;; Defined at:
  1704 ;;		line 313 in file "eSafeMain.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		None
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;Total ram usage:        0 bytes
  1723 ;; Hardware stack levels used: 1
  1724 ;; Hardware stack levels required when called: 2
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           	psect	text6
  1733  001CFA                     __ptext6:
  1734                           	callstack 0
  1735  001CFA                     _init_Clock:
  1736                           	callstack 28
  1737  001CFA                     
  1738                           ;eSafeMain.c: 314:      PLLEN = 0;
  1739  001CFA  9C9B               	bcf	3995,6,c	;volatile
  1740                           
  1741                           ;eSafeMain.c: 316:      IRCF2 = 1;
  1742  001CFC  8CD3               	bsf	4051,6,c	;volatile
  1743                           
  1744                           ;eSafeMain.c: 317:      IRCF1 = 1;
  1745  001CFE  8AD3               	bsf	4051,5,c	;volatile
  1746                           
  1747                           ;eSafeMain.c: 318:      IRCF0 = 1;
  1748  001D00  88D3               	bsf	4051,4,c	;volatile
  1749  001D02  0012               	return		;funcret
  1750  001D04                     __end_of_init_Clock:
  1751                           	callstack 0
  1752                           
  1753 ;; *************** function _init_ADC_Thermometer *****************
  1754 ;; Defined at:
  1755 ;;		line 47 in file "./adc.h"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      void 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;Total ram usage:        0 bytes
  1774 ;; Hardware stack levels used: 1
  1775 ;; Hardware stack levels required when called: 2
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text7
  1784  001BC8                     __ptext7:
  1785                           	callstack 0
  1786  001BC8                     _init_ADC_Thermometer:
  1787                           	callstack 28
  1788  001BC8                     
  1789                           ;./adc.h: 48:     TRISA = 0x04;
  1790  001BC8  0E04               	movlw	4
  1791  001BCA  6E92               	movwf	146,c	;volatile
  1792                           
  1793                           ;./adc.h: 49:     ADCON0 = 0x09;
  1794  001BCC  0E09               	movlw	9
  1795  001BCE  6EC2               	movwf	194,c	;volatile
  1796                           
  1797                           ;./adc.h: 50:     ADCON1 = 0x0A;
  1798  001BD0  0E0A               	movlw	10
  1799  001BD2  6EC1               	movwf	193,c	;volatile
  1800                           
  1801                           ;./adc.h: 51:     ADCON2 = 0xBE;
  1802  001BD4  0EBE               	movlw	190
  1803  001BD6  6EC0               	movwf	192,c	;volatile
  1804                           
  1805                           ;./adc.h: 52:     ADRESH = 0;
  1806  001BD8  0E00               	movlw	0
  1807  001BDA  6EC4               	movwf	196,c	;volatile
  1808                           
  1809                           ;./adc.h: 53:     ADRESL = 0;
  1810  001BDC  0E00               	movlw	0
  1811  001BDE  6EC3               	movwf	195,c	;volatile
  1812  001BE0                     
  1813                           ;./adc.h: 55:     GIE = 1;
  1814  001BE0  8EF2               	bsf	4082,7,c	;volatile
  1815  001BE2                     
  1816                           ;./adc.h: 56:     PEIE = 1;
  1817  001BE2  8CF2               	bsf	4082,6,c	;volatile
  1818  001BE4                     
  1819                           ;./adc.h: 57:     IPEN = 0;
  1820  001BE4  9ED0               	bcf	4048,7,c	;volatile
  1821  001BE6                     
  1822                           ;./adc.h: 58:     ADIE = 1;
  1823  001BE6  8C9D               	bsf	3997,6,c	;volatile
  1824  001BE8                     
  1825                           ;./adc.h: 59:     ADIP = 1;
  1826  001BE8  8C9F               	bsf	3999,6,c	;volatile
  1827  001BEA                     
  1828                           ;./adc.h: 60:     ADIF = 0;
  1829  001BEA  9C9E               	bcf	3998,6,c	;volatile
  1830  001BEC  0012               	return		;funcret
  1831  001BEE                     __end_of_init_ADC_Thermometer:
  1832                           	callstack 0
  1833                           
  1834 ;; *************** function _init_ADC_Potentiometer *****************
  1835 ;; Defined at:
  1836 ;;		line 14 in file "./adc.h"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;		None
  1839 ;; Auto vars:     Size  Location     Type
  1840 ;;		None
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, status,2
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1854 ;;Total ram usage:        0 bytes
  1855 ;; Hardware stack levels used: 1
  1856 ;; Hardware stack levels required when called: 2
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		_main
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	text8
  1865  001BEE                     __ptext8:
  1866                           	callstack 0
  1867  001BEE                     _init_ADC_Potentiometer:
  1868                           	callstack 28
  1869  001BEE                     
  1870                           ;./adc.h: 15:     TRISA = 0x01;
  1871  001BEE  0E01               	movlw	1
  1872  001BF0  6E92               	movwf	146,c	;volatile
  1873                           
  1874                           ;./adc.h: 16:     ADCON0 = 0x01;
  1875  001BF2  0E01               	movlw	1
  1876  001BF4  6EC2               	movwf	194,c	;volatile
  1877                           
  1878                           ;./adc.h: 17:     ADCON1 = 0x0E;
  1879  001BF6  0E0E               	movlw	14
  1880  001BF8  6EC1               	movwf	193,c	;volatile
  1881                           
  1882                           ;./adc.h: 18:     ADCON2 = 0xBE;
  1883  001BFA  0EBE               	movlw	190
  1884  001BFC  6EC0               	movwf	192,c	;volatile
  1885                           
  1886                           ;./adc.h: 19:     ADRESH = 0;
  1887  001BFE  0E00               	movlw	0
  1888  001C00  6EC4               	movwf	196,c	;volatile
  1889                           
  1890                           ;./adc.h: 20:     ADRESL = 0;
  1891  001C02  0E00               	movlw	0
  1892  001C04  6EC3               	movwf	195,c	;volatile
  1893  001C06                     
  1894                           ;./adc.h: 22:     GIE = 1;
  1895  001C06  8EF2               	bsf	4082,7,c	;volatile
  1896  001C08                     
  1897                           ;./adc.h: 23:     PEIE = 1;
  1898  001C08  8CF2               	bsf	4082,6,c	;volatile
  1899  001C0A                     
  1900                           ;./adc.h: 24:     IPEN = 0;
  1901  001C0A  9ED0               	bcf	4048,7,c	;volatile
  1902  001C0C                     
  1903                           ;./adc.h: 25:     ADIE = 1;
  1904  001C0C  8C9D               	bsf	3997,6,c	;volatile
  1905  001C0E                     
  1906                           ;./adc.h: 26:     ADIP = 1;
  1907  001C0E  8C9F               	bsf	3999,6,c	;volatile
  1908  001C10                     
  1909                           ;./adc.h: 27:     ADIF = 0;
  1910  001C10  9C9E               	bcf	3998,6,c	;volatile
  1911  001C12  0012               	return		;funcret
  1912  001C14                     __end_of_init_ADC_Potentiometer:
  1913                           	callstack 0
  1914                           
  1915 ;; *************** function _displayNumbers *****************
  1916 ;; Defined at:
  1917 ;;		line 255 in file "eSafeMain.c"
  1918 ;; Parameters:    Size  Location     Type
  1919 ;;  value           2   26[COMRAM] unsigned int 
  1920 ;;  digitNo         1   28[COMRAM] unsigned char 
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;  digitH          1   32[COMRAM] unsigned char 
  1923 ;;  digitL          1   31[COMRAM] unsigned char 
  1924 ;; Return value:  Size  Location     Type
  1925 ;;                  1    wreg      void 
  1926 ;; Registers used:
  1927 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1928 ;; Tracked objects:
  1929 ;;		On entry : 0/0
  1930 ;;		On exit  : 0/0
  1931 ;;		Unchanged: 0/0
  1932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1933 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;Total ram usage:        7 bytes
  1938 ;; Hardware stack levels used: 1
  1939 ;; Hardware stack levels required when called: 4
  1940 ;; This function calls:
  1941 ;;		_LCDDat
  1942 ;;		_LCDGoto
  1943 ;;		___awdiv
  1944 ;; This function is called by:
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text9
  1950  00174C                     __ptext9:
  1951                           	callstack 0
  1952  00174C                     _displayNumbers:
  1953                           	callstack 26
  1954  00174C                     
  1955                           ;eSafeMain.c: 256:     byte digitH, digitL;;eSafeMain.c: 258:     TRISD = 0;
  1956  00174C  0E00               	movlw	0
  1957  00174E  6E95               	movwf	149,c	;volatile
  1958  001750                     
  1959                           ;eSafeMain.c: 260:     if (value >= 100){
  1960  001750  501C               	movf	(displayNumbers@value+1)^0,w,c
  1961  001752  E109               	bnz	u650
  1962  001754  0E64               	movlw	100
  1963  001756  5C1B               	subwf	displayNumbers@value^0,w,c
  1964  001758  A0D8               	btfss	status,0,c
  1965  00175A  EFB1  F00B         	goto	u651
  1966  00175E  EFB3  F00B         	goto	u650
  1967  001762                     u651:
  1968  001762  EFB9  F00B         	goto	l2026
  1969  001766                     u650:
  1970  001766                     
  1971                           ;eSafeMain.c: 262:         digitH = 'X';
  1972  001766  0E58               	movlw	88
  1973  001768  6E21               	movwf	displayNumbers@digitH^0,c
  1974                           
  1975                           ;eSafeMain.c: 263:         digitL = 'X';
  1976  00176A  0E58               	movlw	88
  1977  00176C  6E20               	movwf	displayNumbers@digitL^0,c
  1978                           
  1979                           ;eSafeMain.c: 264:     }
  1980  00176E  EFF6  F00B         	goto	l2054
  1981  001772                     l2026:
  1982                           
  1983                           ;eSafeMain.c: 267:         digitH = (byte)value / 10;
  1984  001772  C01B  F013         	movff	displayNumbers@value,___awdiv@dividend
  1985  001776  6A14               	clrf	(___awdiv@dividend+1)^0,c
  1986  001778  0E00               	movlw	0
  1987  00177A  6E16               	movwf	(___awdiv@divisor+1)^0,c
  1988  00177C  0E0A               	movlw	10
  1989  00177E  6E15               	movwf	___awdiv@divisor^0,c
  1990  001780  EC10  F00C         	call	___awdiv	;wreg free
  1991  001784  5013               	movf	?___awdiv^0,w,c
  1992  001786  6E21               	movwf	displayNumbers@digitH^0,c
  1993  001788                     
  1994                           ;eSafeMain.c: 268:         digitL = (byte)(value - (digitH * 10));
  1995  001788  5021               	movf	displayNumbers@digitH^0,w,c
  1996  00178A  0DF6               	mullw	246
  1997  00178C  50F3               	movf	243,w,c
  1998  00178E  241B               	addwf	displayNumbers@value^0,w,c
  1999  001790  6E20               	movwf	displayNumbers@digitL^0,c
  2000  001792                     
  2001                           ;eSafeMain.c: 269:         digitH += 0x30;
  2002  001792  0E30               	movlw	48
  2003  001794  2621               	addwf	displayNumbers@digitH^0,f,c
  2004  001796                     
  2005                           ;eSafeMain.c: 270:         digitL += 0x30;
  2006  001796  0E30               	movlw	48
  2007  001798  2620               	addwf	displayNumbers@digitL^0,f,c
  2008  00179A  EFF6  F00B         	goto	l2054
  2009  00179E                     l2034:
  2010                           
  2011                           ;eSafeMain.c: 280:          LCDGoto(1,2);
  2012  00179E  0E02               	movlw	2
  2013  0017A0  6E15               	movwf	LCDGoto@p_1^0,c
  2014  0017A2  0E01               	movlw	1
  2015  0017A4  EC9B  F00D         	call	_LCDGoto
  2016  0017A8                     
  2017                           ;eSafeMain.c: 281:          LCDDat(digitH);
  2018  0017A8  5021               	movf	displayNumbers@digitH^0,w,c
  2019  0017AA  EC2B  F00E         	call	_LCDDat
  2020  0017AE                     
  2021                           ;eSafeMain.c: 282:          LCDDat(digitL);
  2022  0017AE  5020               	movf	displayNumbers@digitL^0,w,c
  2023  0017B0  EC2B  F00E         	call	_LCDDat
  2024                           
  2025                           ;eSafeMain.c: 283:          break;
  2026  0017B4  EF0F  F00C         	goto	l350
  2027  0017B8                     l2040:
  2028                           
  2029                           ;eSafeMain.c: 285:          LCDGoto(4,2);
  2030  0017B8  0E02               	movlw	2
  2031  0017BA  6E15               	movwf	LCDGoto@p_1^0,c
  2032  0017BC  0E04               	movlw	4
  2033  0017BE  EC9B  F00D         	call	_LCDGoto
  2034  0017C2                     
  2035                           ;eSafeMain.c: 286:          LCDDat(digitH);
  2036  0017C2  5021               	movf	displayNumbers@digitH^0,w,c
  2037  0017C4  EC2B  F00E         	call	_LCDDat
  2038  0017C8                     
  2039                           ;eSafeMain.c: 287:          LCDDat(digitL);
  2040  0017C8  5020               	movf	displayNumbers@digitL^0,w,c
  2041  0017CA  EC2B  F00E         	call	_LCDDat
  2042                           
  2043                           ;eSafeMain.c: 288:          break;
  2044  0017CE  EF0F  F00C         	goto	l350
  2045  0017D2                     l2046:
  2046                           
  2047                           ;eSafeMain.c: 290:          LCDGoto(7,2);
  2048  0017D2  0E02               	movlw	2
  2049  0017D4  6E15               	movwf	LCDGoto@p_1^0,c
  2050  0017D6  0E07               	movlw	7
  2051  0017D8  EC9B  F00D         	call	_LCDGoto
  2052  0017DC                     
  2053                           ;eSafeMain.c: 291:          LCDDat(digitH);
  2054  0017DC  5021               	movf	displayNumbers@digitH^0,w,c
  2055  0017DE  EC2B  F00E         	call	_LCDDat
  2056  0017E2                     
  2057                           ;eSafeMain.c: 292:          LCDDat(digitL);
  2058  0017E2  5020               	movf	displayNumbers@digitL^0,w,c
  2059  0017E4  EC2B  F00E         	call	_LCDDat
  2060                           
  2061                           ;eSafeMain.c: 293:          break;
  2062  0017E8  EF0F  F00C         	goto	l350
  2063  0017EC                     l2054:
  2064  0017EC  501D               	movf	displayNumbers@digitNo^0,w,c
  2065  0017EE  6E1E               	movwf	??_displayNumbers^0,c
  2066  0017F0  6A1F               	clrf	(??_displayNumbers+1)^0,c
  2067                           
  2068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2069                           ; Switch size 1, requested type "simple"
  2070                           ; Number of cases is 1, Range of values is 0 to 0
  2071                           ; switch strategies available:
  2072                           ; Name         Instructions Cycles
  2073                           ; simple_byte            4     3 (average)
  2074                           ;	Chosen strategy is simple_byte
  2075  0017F2  501F               	movf	(??_displayNumbers+1)^0,w,c
  2076  0017F4  0A00               	xorlw	0	; case 0
  2077  0017F6  B4D8               	btfsc	status,2,c
  2078  0017F8  EF00  F00C         	goto	l2502
  2079  0017FC  EF0F  F00C         	goto	l350
  2080  001800                     l2502:
  2081                           
  2082                           ; Switch size 1, requested type "simple"
  2083                           ; Number of cases is 3, Range of values is 1 to 3
  2084                           ; switch strategies available:
  2085                           ; Name         Instructions Cycles
  2086                           ; simple_byte           10     6 (average)
  2087                           ;	Chosen strategy is simple_byte
  2088  001800  501E               	movf	??_displayNumbers^0,w,c
  2089  001802  0A01               	xorlw	1	; case 1
  2090  001804  B4D8               	btfsc	status,2,c
  2091  001806  EFCF  F00B         	goto	l2034
  2092  00180A  0A03               	xorlw	3	; case 2
  2093  00180C  B4D8               	btfsc	status,2,c
  2094  00180E  EFDC  F00B         	goto	l2040
  2095  001812  0A01               	xorlw	1	; case 3
  2096  001814  B4D8               	btfsc	status,2,c
  2097  001816  EFE9  F00B         	goto	l2046
  2098  00181A  EF0F  F00C         	goto	l350
  2099  00181E                     l350:
  2100  00181E  0012               	return		;funcret
  2101  001820                     __end_of_displayNumbers:
  2102                           	callstack 0
  2103                           
  2104 ;; *************** function ___awdiv *****************
  2105 ;; Defined at:
  2106 ;;		line 7 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/awdiv.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;  dividend        2   18[COMRAM] int 
  2109 ;;  divisor         2   20[COMRAM] int 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  quotient        2   24[COMRAM] int 
  2112 ;;  sign            1   23[COMRAM] unsigned char 
  2113 ;;  counter         1   22[COMRAM] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  2   18[COMRAM] int 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2123 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;Total ram usage:        8 bytes
  2128 ;; Hardware stack levels used: 1
  2129 ;; Hardware stack levels required when called: 2
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;;		_displayNumbers
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text10
  2139  001820                     __ptext10:
  2140                           	callstack 0
  2141  001820                     ___awdiv:
  2142                           	callstack 27
  2143  001820  0E00               	movlw	0
  2144  001822  6E18               	movwf	___awdiv@sign^0,c
  2145  001824  BE16               	btfsc	(___awdiv@divisor+1)^0,7,c
  2146  001826  EF19  F00C         	goto	u550
  2147  00182A  EF17  F00C         	goto	u551
  2148  00182E                     u551:
  2149  00182E  EF1F  F00C         	goto	l1804
  2150  001832                     u550:
  2151  001832  6C15               	negf	___awdiv@divisor^0,c
  2152  001834  1E16               	comf	(___awdiv@divisor+1)^0,f,c
  2153  001836  B0D8               	btfsc	status,0,c
  2154  001838  2A16               	incf	(___awdiv@divisor+1)^0,f,c
  2155  00183A  0E01               	movlw	1
  2156  00183C  6E18               	movwf	___awdiv@sign^0,c
  2157  00183E                     l1804:
  2158  00183E  BE14               	btfsc	(___awdiv@dividend+1)^0,7,c
  2159  001840  EF26  F00C         	goto	u560
  2160  001844  EF24  F00C         	goto	u561
  2161  001848                     u561:
  2162  001848  EF2C  F00C         	goto	l1810
  2163  00184C                     u560:
  2164  00184C  6C13               	negf	___awdiv@dividend^0,c
  2165  00184E  1E14               	comf	(___awdiv@dividend+1)^0,f,c
  2166  001850  B0D8               	btfsc	status,0,c
  2167  001852  2A14               	incf	(___awdiv@dividend+1)^0,f,c
  2168  001854  0E01               	movlw	1
  2169  001856  1A18               	xorwf	___awdiv@sign^0,f,c
  2170  001858                     l1810:
  2171  001858  0E00               	movlw	0
  2172  00185A  6E1A               	movwf	(___awdiv@quotient+1)^0,c
  2173  00185C  0E00               	movlw	0
  2174  00185E  6E19               	movwf	___awdiv@quotient^0,c
  2175  001860  5015               	movf	___awdiv@divisor^0,w,c
  2176  001862  1016               	iorwf	(___awdiv@divisor+1)^0,w,c
  2177  001864  B4D8               	btfsc	status,2,c
  2178  001866  EF37  F00C         	goto	u571
  2179  00186A  EF39  F00C         	goto	u570
  2180  00186E                     u571:
  2181  00186E  EF61  F00C         	goto	l1832
  2182  001872                     u570:
  2183  001872  0E01               	movlw	1
  2184  001874  6E17               	movwf	___awdiv@counter^0,c
  2185  001876  EF41  F00C         	goto	l1818
  2186  00187A                     l1816:
  2187  00187A  90D8               	bcf	status,0,c
  2188  00187C  3615               	rlcf	___awdiv@divisor^0,f,c
  2189  00187E  3616               	rlcf	(___awdiv@divisor+1)^0,f,c
  2190  001880  2A17               	incf	___awdiv@counter^0,f,c
  2191  001882                     l1818:
  2192  001882  AE16               	btfss	(___awdiv@divisor+1)^0,7,c
  2193  001884  EF46  F00C         	goto	u581
  2194  001888  EF48  F00C         	goto	u580
  2195  00188C                     u581:
  2196  00188C  EF3D  F00C         	goto	l1816
  2197  001890                     u580:
  2198  001890                     l1820:
  2199  001890  90D8               	bcf	status,0,c
  2200  001892  3619               	rlcf	___awdiv@quotient^0,f,c
  2201  001894  361A               	rlcf	(___awdiv@quotient+1)^0,f,c
  2202  001896  5015               	movf	___awdiv@divisor^0,w,c
  2203  001898  5C13               	subwf	___awdiv@dividend^0,w,c
  2204  00189A  5016               	movf	(___awdiv@divisor+1)^0,w,c
  2205  00189C  5814               	subwfb	(___awdiv@dividend+1)^0,w,c
  2206  00189E  A0D8               	btfss	status,0,c
  2207  0018A0  EF54  F00C         	goto	u591
  2208  0018A4  EF56  F00C         	goto	u590
  2209  0018A8                     u591:
  2210  0018A8  EF5B  F00C         	goto	l1828
  2211  0018AC                     u590:
  2212  0018AC  5015               	movf	___awdiv@divisor^0,w,c
  2213  0018AE  5E13               	subwf	___awdiv@dividend^0,f,c
  2214  0018B0  5016               	movf	(___awdiv@divisor+1)^0,w,c
  2215  0018B2  5A14               	subwfb	(___awdiv@dividend+1)^0,f,c
  2216  0018B4  8019               	bsf	___awdiv@quotient^0,0,c
  2217  0018B6                     l1828:
  2218  0018B6  90D8               	bcf	status,0,c
  2219  0018B8  3216               	rrcf	(___awdiv@divisor+1)^0,f,c
  2220  0018BA  3215               	rrcf	___awdiv@divisor^0,f,c
  2221  0018BC  2E17               	decfsz	___awdiv@counter^0,f,c
  2222  0018BE  EF48  F00C         	goto	l1820
  2223  0018C2                     l1832:
  2224  0018C2  5018               	movf	___awdiv@sign^0,w,c
  2225  0018C4  B4D8               	btfsc	status,2,c
  2226  0018C6  EF67  F00C         	goto	u601
  2227  0018CA  EF69  F00C         	goto	u600
  2228  0018CE                     u601:
  2229  0018CE  EF6D  F00C         	goto	l1836
  2230  0018D2                     u600:
  2231  0018D2  6C19               	negf	___awdiv@quotient^0,c
  2232  0018D4  1E1A               	comf	(___awdiv@quotient+1)^0,f,c
  2233  0018D6  B0D8               	btfsc	status,0,c
  2234  0018D8  2A1A               	incf	(___awdiv@quotient+1)^0,f,c
  2235  0018DA                     l1836:
  2236  0018DA  C019  F013         	movff	___awdiv@quotient,?___awdiv
  2237  0018DE  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  2238  0018E2  0012               	return		;funcret
  2239  0018E4                     __end_of___awdiv:
  2240                           	callstack 0
  2241                           
  2242 ;; *************** function _delayWithTimer2 *****************
  2243 ;; Defined at:
  2244 ;;		line 80 in file "./timers.h"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;  milliseconds    2   18[COMRAM] unsigned int 
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;  currentVal      2   20[COMRAM] unsigned int 
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2258 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2259 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;Total ram usage:        4 bytes
  2263 ;; Hardware stack levels used: 1
  2264 ;; Hardware stack levels required when called: 2
  2265 ;; This function calls:
  2266 ;;		Nothing
  2267 ;; This function is called by:
  2268 ;;		_main
  2269 ;; This function uses a non-reentrant model
  2270 ;;
  2271                           
  2272                           	psect	text11
  2273  001B9C                     __ptext11:
  2274                           	callstack 0
  2275  001B9C                     _delayWithTimer2:
  2276                           	callstack 28
  2277  001B9C                     
  2278                           ;./timers.h: 83:     TMR2Counter = 0;
  2279  001B9C  0E00               	movlw	0
  2280  001B9E  6E52               	movwf	(_TMR2Counter+1)^0,c
  2281  001BA0  0E00               	movlw	0
  2282  001BA2  6E51               	movwf	_TMR2Counter^0,c
  2283  001BA4                     
  2284                           ;./timers.h: 84:     TMR2ON = 1;
  2285  001BA4  84CA               	bsf	4042,2,c	;volatile
  2286  001BA6                     l1892:
  2287                           
  2288                           ;./timers.h: 87:         currentVal = TMR2Counter;
  2289  001BA6  C051  F015         	movff	_TMR2Counter,delayWithTimer2@currentVal
  2290  001BAA  C052  F016         	movff	_TMR2Counter+1,delayWithTimer2@currentVal+1
  2291  001BAE                     
  2292                           ;./timers.h: 88:     }while(currentVal < milliseconds);
  2293  001BAE  5013               	movf	delayWithTimer2@milliseconds^0,w,c
  2294  001BB0  5C15               	subwf	delayWithTimer2@currentVal^0,w,c
  2295  001BB2  5014               	movf	(delayWithTimer2@milliseconds+1)^0,w,c
  2296  001BB4  5816               	subwfb	(delayWithTimer2@currentVal+1)^0,w,c
  2297  001BB6  A0D8               	btfss	status,0,c
  2298  001BB8  EFE0  F00D         	goto	u611
  2299  001BBC  EFE2  F00D         	goto	u610
  2300  001BC0                     u611:
  2301  001BC0  EFD3  F00D         	goto	l1892
  2302  001BC4                     u610:
  2303  001BC4                     
  2304                           ;./timers.h: 89:     TMR2ON = 0;
  2305  001BC4  94CA               	bcf	4042,2,c	;volatile
  2306  001BC6  0012               	return		;funcret
  2307  001BC8                     __end_of_delayWithTimer2:
  2308                           	callstack 0
  2309                           
  2310 ;; *************** function _config_ADC_Thermometer *****************
  2311 ;; Defined at:
  2312 ;;		line 39 in file "./adc.h"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, status,2, status,0
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;Total ram usage:        0 bytes
  2331 ;; Hardware stack levels used: 1
  2332 ;; Hardware stack levels required when called: 2
  2333 ;; This function calls:
  2334 ;;		Nothing
  2335 ;; This function is called by:
  2336 ;;		_main
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           	psect	text12
  2341  001CD8                     __ptext12:
  2342                           	callstack 0
  2343  001CD8                     _config_ADC_Thermometer:
  2344                           	callstack 28
  2345  001CD8                     
  2346                           ;./adc.h: 40:     TRISA &= 0xFA;
  2347  001CD8  0EFA               	movlw	250
  2348  001CDA  1692               	andwf	146,f,c	;volatile
  2349  001CDC                     
  2350                           ;./adc.h: 41:     TRISA = 0x04;
  2351  001CDC  0E04               	movlw	4
  2352  001CDE  6E92               	movwf	146,c	;volatile
  2353  001CE0                     
  2354                           ;./adc.h: 42:     ADCON0 = 0x09;
  2355  001CE0  0E09               	movlw	9
  2356  001CE2  6EC2               	movwf	194,c	;volatile
  2357  001CE4                     
  2358                           ;./adc.h: 43:     ADCON1 = 0x0A;
  2359  001CE4  0E0A               	movlw	10
  2360  001CE6  6EC1               	movwf	193,c	;volatile
  2361  001CE8  0012               	return		;funcret
  2362  001CEA                     __end_of_config_ADC_Thermometer:
  2363                           	callstack 0
  2364                           
  2365 ;; *************** function _config_ADC_Potentiometer *****************
  2366 ;; Defined at:
  2367 ;;		line 31 in file "./adc.h"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;		None
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;		None
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg, status,2, status,0
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;Total ram usage:        0 bytes
  2386 ;; Hardware stack levels used: 1
  2387 ;; Hardware stack levels required when called: 2
  2388 ;; This function calls:
  2389 ;;		Nothing
  2390 ;; This function is called by:
  2391 ;;		_main
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           	psect	text13
  2396  001CEA                     __ptext13:
  2397                           	callstack 0
  2398  001CEA                     _config_ADC_Potentiometer:
  2399                           	callstack 28
  2400  001CEA                     
  2401                           ;./adc.h: 32:     TRISA &= 0xFA;
  2402  001CEA  0EFA               	movlw	250
  2403  001CEC  1692               	andwf	146,f,c	;volatile
  2404  001CEE                     
  2405                           ;./adc.h: 33:     TRISA |= 0x01;
  2406  001CEE  8092               	bsf	146,0,c	;volatile
  2407  001CF0                     
  2408                           ;./adc.h: 34:     ADCON0 = 0x01;
  2409  001CF0  0E01               	movlw	1
  2410  001CF2  6EC2               	movwf	194,c	;volatile
  2411  001CF4                     
  2412                           ;./adc.h: 35:     ADCON1 = 0x0E;
  2413  001CF4  0E0E               	movlw	14
  2414  001CF6  6EC1               	movwf	193,c	;volatile
  2415  001CF8  0012               	return		;funcret
  2416  001CFA                     __end_of_config_ADC_Potentiometer:
  2417                           	callstack 0
  2418                           
  2419 ;; *************** function _LCDStr *****************
  2420 ;; Defined at:
  2421 ;;		line 85 in file "./LCD.h"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  str             2   22[COMRAM] PTR const unsigned char 
  2424 ;;		 -> STR_11(16), STR_10(12), STR_9(13), STR_8(16), 
  2425 ;;		 -> STR_7(9), STR_6(11), STR_5(9), STR_4(16), 
  2426 ;;		 -> STR_3(9), STR_2(14), STR_1(17), 
  2427 ;; Auto vars:     Size  Location     Type
  2428 ;;  i               1   26[COMRAM] unsigned char 
  2429 ;; Return value:  Size  Location     Type
  2430 ;;                  1    wreg      void 
  2431 ;; Registers used:
  2432 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2433 ;; Tracked objects:
  2434 ;;		On entry : 0/0
  2435 ;;		On exit  : 0/0
  2436 ;;		Unchanged: 0/0
  2437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2438 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2442 ;;Total ram usage:        5 bytes
  2443 ;; Hardware stack levels used: 1
  2444 ;; Hardware stack levels required when called: 4
  2445 ;; This function calls:
  2446 ;;		_LCDDat
  2447 ;;		_LCDGoto
  2448 ;; This function is called by:
  2449 ;;		_main
  2450 ;; This function uses a non-reentrant model
  2451 ;;
  2452                           
  2453                           	psect	text14
  2454  0019A8                     __ptext14:
  2455                           	callstack 0
  2456  0019A8                     _LCDStr:
  2457                           	callstack 26
  2458  0019A8                     
  2459                           ;./LCD.h: 86:   for (byte i = 0; str[i] != 0; i++) {
  2460  0019A8  0E00               	movlw	0
  2461  0019AA  6E1B               	movwf	LCDStr@i^0,c
  2462  0019AC  EF04  F00D         	goto	l1980
  2463  0019B0                     l1962:
  2464                           
  2465                           ;./LCD.h: 87:     LCDDat(str[i]);
  2466  0019B0  501B               	movf	LCDStr@i^0,w,c
  2467  0019B2  2417               	addwf	LCDStr@str^0,w,c
  2468  0019B4  6E19               	movwf	??_LCDStr^0,c
  2469  0019B6  0E00               	movlw	0
  2470  0019B8  2018               	addwfc	(LCDStr@str+1)^0,w,c
  2471  0019BA  6E1A               	movwf	(??_LCDStr+1)^0,c
  2472  0019BC  C019  FFF6         	movff	??_LCDStr,tblptrl
  2473  0019C0  C01A  FFF7         	movff	??_LCDStr+1,tblptrh
  2474  0019C4                     	if	0	;tblptru may be non-zero
  2475  0019C4                     	endif
  2476  0019C4                     	if	0	;tblptru may be non-zero
  2477  0019C4                     	endif
  2478  0019C4  0008               	tblrd		*
  2479  0019C6  50F5               	movf	tablat,w,c
  2480  0019C8  EC2B  F00E         	call	_LCDDat
  2481  0019CC                     
  2482                           ;./LCD.h: 88:     lcd_x ++;
  2483  0019CC  2A43               	incf	_lcd_x^0,f,c
  2484  0019CE                     
  2485                           ;./LCD.h: 89:     if(lcd_x == 17) {
  2486  0019CE  0E11               	movlw	17
  2487  0019D0  1843               	xorwf	_lcd_x^0,w,c
  2488  0019D2  A4D8               	btfss	status,2,c
  2489  0019D4  EFEE  F00C         	goto	u621
  2490  0019D8  EFF0  F00C         	goto	u620
  2491  0019DC                     u621:
  2492  0019DC  EF03  F00D         	goto	l1978
  2493  0019E0                     u620:
  2494  0019E0                     
  2495                           ;./LCD.h: 90:       lcd_x = 1;
  2496  0019E0  0E01               	movlw	1
  2497  0019E2  6E43               	movwf	_lcd_x^0,c
  2498  0019E4                     
  2499                           ;./LCD.h: 91:       lcd_y++;
  2500  0019E4  2A42               	incf	_lcd_y^0,f,c
  2501  0019E6                     
  2502                           ;./LCD.h: 92:       if (lcd_y == 3) {
  2503  0019E6  0E03               	movlw	3
  2504  0019E8  1842               	xorwf	_lcd_y^0,w,c
  2505  0019EA  A4D8               	btfss	status,2,c
  2506  0019EC  EFFA  F00C         	goto	u631
  2507  0019F0  EFFC  F00C         	goto	u630
  2508  0019F4                     u631:
  2509  0019F4  EFFE  F00C         	goto	l1976
  2510  0019F8                     u630:
  2511  0019F8                     
  2512                           ;./LCD.h: 93:          lcd_y = 1;
  2513  0019F8  0E01               	movlw	1
  2514  0019FA  6E42               	movwf	_lcd_y^0,c
  2515  0019FC                     l1976:
  2516                           
  2517                           ;./LCD.h: 95:       LCDGoto(lcd_x, lcd_y);
  2518  0019FC  C042  F015         	movff	_lcd_y,LCDGoto@p_1
  2519  001A00  5043               	movf	_lcd_x^0,w,c
  2520  001A02  EC9B  F00D         	call	_LCDGoto
  2521  001A06                     l1978:
  2522                           
  2523                           ;./LCD.h: 97:   }
  2524  001A06  2A1B               	incf	LCDStr@i^0,f,c
  2525  001A08                     l1980:
  2526  001A08  501B               	movf	LCDStr@i^0,w,c
  2527  001A0A  2417               	addwf	LCDStr@str^0,w,c
  2528  001A0C  6E19               	movwf	??_LCDStr^0,c
  2529  001A0E  0E00               	movlw	0
  2530  001A10  2018               	addwfc	(LCDStr@str+1)^0,w,c
  2531  001A12  6E1A               	movwf	(??_LCDStr+1)^0,c
  2532  001A14  C019  FFF6         	movff	??_LCDStr,tblptrl
  2533  001A18  C01A  FFF7         	movff	??_LCDStr+1,tblptrh
  2534  001A1C                     	if	0	;tblptru may be non-zero
  2535  001A1C                     	endif
  2536  001A1C                     	if	0	;tblptru may be non-zero
  2537  001A1C                     	endif
  2538  001A1C  0008               	tblrd		*
  2539  001A1E  50F5               	movf	tablat,w,c
  2540  001A20  0900               	iorlw	0
  2541  001A22  A4D8               	btfss	status,2,c
  2542  001A24  EF16  F00D         	goto	u641
  2543  001A28  EF18  F00D         	goto	u640
  2544  001A2C                     u641:
  2545  001A2C  EFD8  F00C         	goto	l1962
  2546  001A30                     u640:
  2547  001A30  0012               	return		;funcret
  2548  001A32                     __end_of_LCDStr:
  2549                           	callstack 0
  2550                           
  2551 ;; *************** function _LCDGoto *****************
  2552 ;; Defined at:
  2553 ;;		line 73 in file "./LCD.h"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;  p_2             1    wreg     unsigned char 
  2556 ;;  p_1             1   20[COMRAM] unsigned char 
  2557 ;; Auto vars:     Size  Location     Type
  2558 ;;  p_2             1   21[COMRAM] unsigned char 
  2559 ;; Return value:  Size  Location     Type
  2560 ;;                  1    wreg      void 
  2561 ;; Registers used:
  2562 ;;		wreg, status,2, status,0, cstack
  2563 ;; Tracked objects:
  2564 ;;		On entry : 0/0
  2565 ;;		On exit  : 0/0
  2566 ;;		Unchanged: 0/0
  2567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2568 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2572 ;;Total ram usage:        2 bytes
  2573 ;; Hardware stack levels used: 1
  2574 ;; Hardware stack levels required when called: 3
  2575 ;; This function calls:
  2576 ;;		_LCDCmd
  2577 ;; This function is called by:
  2578 ;;		_LCDStr
  2579 ;;		_main
  2580 ;;		_displayNumbers
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           	psect	text15
  2585  001B36                     __ptext15:
  2586                           	callstack 0
  2587  001B36                     _LCDGoto:
  2588                           	callstack 26
  2589                           
  2590                           ;incstack = 0
  2591                           ;LCDGoto@p_2 stored from wreg
  2592  001B36  6E16               	movwf	LCDGoto@p_2^0,c
  2593  001B38                     
  2594                           ;./LCD.h: 74:   if(p_1==1) {
  2595  001B38  0415               	decf	LCDGoto@p_1^0,w,c
  2596  001B3A  A4D8               	btfss	status,2,c
  2597  001B3C  EFA2  F00D         	goto	u541
  2598  001B40  EFA4  F00D         	goto	u540
  2599  001B44                     u541:
  2600  001B44  EFAB  F00D         	goto	l1790
  2601  001B48                     u540:
  2602  001B48                     
  2603                           ;./LCD.h: 75:     LCDCmd(0x80 +((p_2-1)%16));
  2604  001B48  0416               	decf	LCDGoto@p_2^0,w,c
  2605  001B4A  0B0F               	andlw	15
  2606  001B4C  0F80               	addlw	128
  2607  001B4E  EC3B  F00E         	call	_LCDCmd
  2608                           
  2609                           ;./LCD.h: 76:   } else {
  2610  001B52  EFB0  F00D         	goto	l1792
  2611  001B56                     l1790:
  2612                           
  2613                           ;./LCD.h: 77:     LCDCmd(0xC0 +((p_2-1)%16));
  2614  001B56  0416               	decf	LCDGoto@p_2^0,w,c
  2615  001B58  0B0F               	andlw	15
  2616  001B5A  0FC0               	addlw	192
  2617  001B5C  EC3B  F00E         	call	_LCDCmd
  2618  001B60                     l1792:
  2619                           
  2620                           ;./LCD.h: 79:   lcd_x = p_2;
  2621  001B60  C016  F043         	movff	LCDGoto@p_2,_lcd_x
  2622  001B64                     
  2623                           ;./LCD.h: 80:   lcd_y = p_1;
  2624  001B64  C015  F042         	movff	LCDGoto@p_1,_lcd_y
  2625  001B68  0012               	return		;funcret
  2626  001B6A                     __end_of_LCDGoto:
  2627                           	callstack 0
  2628                           
  2629 ;; *************** function _LCDDat *****************
  2630 ;; Defined at:
  2631 ;;		line 59 in file "./LCD.h"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  dat             1    wreg     unsigned char 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  dat             1   19[COMRAM] unsigned char 
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg, status,2, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;Total ram usage:        2 bytes
  2650 ;; Hardware stack levels used: 1
  2651 ;; Hardware stack levels required when called: 2
  2652 ;; This function calls:
  2653 ;;		Nothing
  2654 ;; This function is called by:
  2655 ;;		_LCDStr
  2656 ;;		_displayNumbers
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text16
  2661  001C56                     __ptext16:
  2662                           	callstack 0
  2663  001C56                     _LCDDat:
  2664                           	callstack 27
  2665                           
  2666                           ;incstack = 0
  2667                           ;LCDDat@dat stored from wreg
  2668  001C56  6E14               	movwf	LCDDat@dat^0,c
  2669  001C58                     
  2670                           ;./LCD.h: 60:   PORTEbits.RE1 = 0;
  2671  001C58  9284               	bcf	132,1,c	;volatile
  2672                           
  2673                           ;./LCD.h: 61:   PORTEbits.RE2 = 1;
  2674  001C5A  8484               	bsf	132,2,c	;volatile
  2675  001C5C                     
  2676                           ;./LCD.h: 62:   PORTD = dat;
  2677  001C5C  C014  FF83         	movff	LCDDat@dat,3971	;volatile
  2678  001C60                     
  2679                           ;./LCD.h: 63:   PORTEbits.RE1 = 1;
  2680  001C60  8284               	bsf	132,1,c	;volatile
  2681  001C62                     
  2682                           ;./LCD.h: 64:   _delay((unsigned long)((2000)*(4000000L/4000000.0)));
  2683  001C62  0E03               	movlw	3
  2684  001C64  6E13               	movwf	??_LCDDat^0,c
  2685  001C66  0E98               	movlw	152
  2686  001C68                     u1117:
  2687  001C68  2EE8               	decfsz	wreg,f,c
  2688  001C6A  D7FE               	bra	u1117
  2689  001C6C  2E13               	decfsz	??_LCDDat^0,f,c
  2690  001C6E  D7FC               	bra	u1117
  2691  001C70                     
  2692                           ;./LCD.h: 65:   PORTEbits.RE1 = 0;
  2693  001C70  9284               	bcf	132,1,c	;volatile
  2694  001C72                     
  2695                           ;./LCD.h: 67:   PORTEbits.RE2 = 0;
  2696  001C72  9484               	bcf	132,2,c	;volatile
  2697  001C74  0012               	return		;funcret
  2698  001C76                     __end_of_LCDDat:
  2699                           	callstack 0
  2700                           
  2701 ;; *************** function _InitLCD *****************
  2702 ;; Defined at:
  2703 ;;		line 102 in file "./LCD.h"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;		None
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2721 ;;Total ram usage:        0 bytes
  2722 ;; Hardware stack levels used: 1
  2723 ;; Hardware stack levels required when called: 3
  2724 ;; This function calls:
  2725 ;;		_LCDCmd
  2726 ;; This function is called by:
  2727 ;;		_main
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text17
  2732  001B6A                     __ptext17:
  2733                           	callstack 0
  2734  001B6A                     _InitLCD:
  2735                           	callstack 27
  2736  001B6A                     
  2737                           ;./LCD.h: 103:   TRISEbits.RE1 = 0;
  2738  001B6A  9296               	bcf	150,1,c	;volatile
  2739                           
  2740                           ;./LCD.h: 104:   TRISEbits.RE2 = 0;
  2741  001B6C  9496               	bcf	150,2,c	;volatile
  2742  001B6E                     
  2743                           ;./LCD.h: 105:   TRISD = 0;
  2744  001B6E  0E00               	movlw	0
  2745  001B70  6E95               	movwf	149,c	;volatile
  2746  001B72                     
  2747                           ;./LCD.h: 107:   PORTEbits.RE1 = 0;
  2748  001B72  9284               	bcf	132,1,c	;volatile
  2749  001B74                     
  2750                           ;./LCD.h: 108:   PORTEbits.RE2 = 0;
  2751  001B74  9484               	bcf	132,2,c	;volatile
  2752  001B76                     
  2753                           ;./LCD.h: 109:   LCDCmd(0x38);
  2754  001B76  0E38               	movlw	56
  2755  001B78  EC3B  F00E         	call	_LCDCmd
  2756  001B7C                     
  2757                           ;./LCD.h: 110:   LCDCmd(0x08);
  2758  001B7C  0E08               	movlw	8
  2759  001B7E  EC3B  F00E         	call	_LCDCmd
  2760  001B82                     
  2761                           ;./LCD.h: 111:   LCDCmd(0x0C);
  2762  001B82  0E0C               	movlw	12
  2763  001B84  EC3B  F00E         	call	_LCDCmd
  2764  001B88                     
  2765                           ;./LCD.h: 112:   LCDCmd(0x06);
  2766  001B88  0E06               	movlw	6
  2767  001B8A  EC3B  F00E         	call	_LCDCmd
  2768  001B8E                     
  2769                           ;./LCD.h: 113:   LCDCmd(0x01);
  2770  001B8E  0E01               	movlw	1
  2771  001B90  EC3B  F00E         	call	_LCDCmd
  2772  001B94                     
  2773                           ;./LCD.h: 114:   LCDCmd(0x80);
  2774  001B94  0E80               	movlw	128
  2775  001B96  EC3B  F00E         	call	_LCDCmd
  2776  001B9A  0012               	return		;funcret
  2777  001B9C                     __end_of_InitLCD:
  2778                           	callstack 0
  2779                           
  2780 ;; *************** function _LCDCmd *****************
  2781 ;; Defined at:
  2782 ;;		line 49 in file "./LCD.h"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  cmd             1    wreg     unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  cmd             1   19[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;Total ram usage:        2 bytes
  2801 ;; Hardware stack levels used: 1
  2802 ;; Hardware stack levels required when called: 2
  2803 ;; This function calls:
  2804 ;;		Nothing
  2805 ;; This function is called by:
  2806 ;;		_LCDGoto
  2807 ;;		_InitLCD
  2808 ;;		_main
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text18
  2813  001C76                     __ptext18:
  2814                           	callstack 0
  2815  001C76                     _LCDCmd:
  2816                           	callstack 26
  2817                           
  2818                           ;incstack = 0
  2819                           ;LCDCmd@cmd stored from wreg
  2820  001C76  6E14               	movwf	LCDCmd@cmd^0,c
  2821  001C78                     
  2822                           ;./LCD.h: 50:   PORTEbits.RE1 = 0;
  2823  001C78  9284               	bcf	132,1,c	;volatile
  2824                           
  2825                           ;./LCD.h: 51:   PORTEbits.RE2 = 0;
  2826  001C7A  9484               	bcf	132,2,c	;volatile
  2827  001C7C                     
  2828                           ;./LCD.h: 52:   PORTD = cmd;
  2829  001C7C  C014  FF83         	movff	LCDCmd@cmd,3971	;volatile
  2830  001C80                     
  2831                           ;./LCD.h: 53:   PORTEbits.RE1 = 1;
  2832  001C80  8284               	bsf	132,1,c	;volatile
  2833  001C82                     
  2834                           ;./LCD.h: 54:   _delay((unsigned long)((2000)*(4000000L/4000000.0)));
  2835  001C82  0E03               	movlw	3
  2836  001C84  6E13               	movwf	??_LCDCmd^0,c
  2837  001C86  0E98               	movlw	152
  2838  001C88                     u1127:
  2839  001C88  2EE8               	decfsz	wreg,f,c
  2840  001C8A  D7FE               	bra	u1127
  2841  001C8C  2E13               	decfsz	??_LCDCmd^0,f,c
  2842  001C8E  D7FC               	bra	u1127
  2843  001C90                     
  2844                           ;./LCD.h: 55:   PORTEbits.RE1 = 0;
  2845  001C90  9284               	bcf	132,1,c	;volatile
  2846  001C92  0012               	return		;funcret
  2847  001C94                     __end_of_LCDCmd:
  2848                           	callstack 0
  2849                           
  2850 ;; *************** function _my_ISR *****************
  2851 ;; Defined at:
  2852 ;;		line 33 in file "./ISR.h"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;		None
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  temperatureC    4    0        float 
  2857 ;;  read_ADC_Raw    2   16[COMRAM] unsigned short 
  2858 ;;  portData        1   15[COMRAM] unsigned char 
  2859 ;;  before          1   14[COMRAM] unsigned char 
  2860 ;; Return value:  Size  Location     Type
  2861 ;;                  1    wreg      void 
  2862 ;; Registers used:
  2863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2864 ;; Tracked objects:
  2865 ;;		On entry : 0/0
  2866 ;;		On exit  : 0/0
  2867 ;;		Unchanged: 0/0
  2868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2872 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;Total ram usage:       10 bytes
  2874 ;; Hardware stack levels used: 1
  2875 ;; Hardware stack levels required when called: 1
  2876 ;; This function calls:
  2877 ;;		___lwdiv
  2878 ;;		i2___awdiv
  2879 ;; This function is called by:
  2880 ;;		Interrupt level 2
  2881 ;; This function uses a non-reentrant model
  2882 ;;
  2883                           
  2884                           	psect	intcode
  2885  000008                     __pintcode:
  2886                           	callstack 0
  2887  000008                     _my_ISR:
  2888                           	callstack 26
  2889                           
  2890                           ;incstack = 0
  2891  000008  825B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2892  00000A  ED1F  F00A         	call	int_func,f	;refresh shadow registers
  2893                           
  2894                           	psect	intcode_body
  2895  00143E                     __pintcode_body:
  2896                           	callstack 26
  2897  00143E                     int_func:
  2898                           	callstack 26
  2899  00143E  0006               	pop		; remove dummy address from shadow register refresh
  2900  001440  CFD9 F00B          	movff	fsr2l,??_my_ISR+2
  2901  001444  CFDA F00C          	movff	fsr2h,??_my_ISR+3
  2902  001448  CFF3 F00D          	movff	prodl,??_my_ISR+4
  2903  00144C  CFF4 F00E          	movff	prodh,??_my_ISR+5
  2904  001450                     
  2905                           ;./ISR.h: 34:     float temperatureCelcius;;./ISR.h: 35:     byte portData;;./ISR.h: 36:
      +                               static byte halfSec = 0;;./ISR.h: 37:     unsigned short read_ADC_Raw;;./ISR.h: 38:
      +                               byte before;;./ISR.h: 39:     static byte flip = 0;;./ISR.h: 95:     if ( ADIF == 1
      +                          ){
  2906  001450  AC9E               	btfss	3998,6,c	;volatile
  2907  001452  EF2D  F00A         	goto	i2u77_41
  2908  001456  EF2F  F00A         	goto	i2u77_40
  2909  00145A                     i2u77_41:
  2910  00145A  EF8A  F00A         	goto	i2l2176
  2911  00145E                     i2u77_40:
  2912  00145E                     
  2913                           ;./ISR.h: 99:         read_ADC_Raw = ADRESH;
  2914  00145E  CFC4 F011          	movff	4036,my_ISR@read_ADC_Raw	;volatile
  2915  001462  6A12               	clrf	(my_ISR@read_ADC_Raw+1)^0,c
  2916                           
  2917                           ;./ISR.h: 100:         read_ADC_Raw = read_ADC_Raw << 8;
  2918  001464  5011               	movf	my_ISR@read_ADC_Raw^0,w,c
  2919  001466  6E12               	movwf	(my_ISR@read_ADC_Raw+1)^0,c
  2920  001468  6A11               	clrf	my_ISR@read_ADC_Raw^0,c
  2921  00146A                     
  2922                           ;./ISR.h: 101:         read_ADC_Raw += ADRESL;
  2923  00146A  50C3               	movf	195,w,c	;volatile
  2924  00146C  2611               	addwf	my_ISR@read_ADC_Raw^0,f,c
  2925  00146E  0E00               	movlw	0
  2926  001470  2212               	addwfc	(my_ISR@read_ADC_Raw+1)^0,f,c
  2927  001472                     
  2928                           ;./ISR.h: 102:         read_ADC_Raw &= 0x03FF;
  2929  001472  0EFF               	movlw	255
  2930  001474  1611               	andwf	my_ISR@read_ADC_Raw^0,f,c
  2931  001476  0E03               	movlw	3
  2932  001478  1612               	andwf	(my_ISR@read_ADC_Raw+1)^0,f,c
  2933  00147A                     
  2934                           ;./ISR.h: 104:         if (digitEntryCount == 2){
  2935  00147A  0E02               	movlw	2
  2936  00147C  185A               	xorwf	_digitEntryCount^0,w,c
  2937  00147E  A4D8               	btfss	status,2,c
  2938  001480  EF44  F00A         	goto	i2u78_41
  2939  001484  EF46  F00A         	goto	i2u78_40
  2940  001488                     i2u78_41:
  2941  001488  EF4E  F00A         	goto	i2l238
  2942  00148C                     i2u78_40:
  2943  00148C                     
  2944                           ;./ISR.h: 106:              read_ADC_Raw = (1024 - read_ADC_Raw);
  2945  00148C  5011               	movf	my_ISR@read_ADC_Raw^0,w,c
  2946  00148E  0800               	sublw	0
  2947  001490  6E11               	movwf	my_ISR@read_ADC_Raw^0,c
  2948  001492  5012               	movf	(my_ISR@read_ADC_Raw+1)^0,w,c
  2949  001494  A0D8               	btfss	status,0,c
  2950  001496  2AE8               	incf	wreg,f,c
  2951  001498  0804               	sublw	4
  2952  00149A  6E12               	movwf	(my_ISR@read_ADC_Raw+1)^0,c
  2953  00149C                     i2l238:
  2954                           
  2955                           ;./ISR.h: 110:         if (read_ADC_Raw < 1000){
  2956  00149C  0EE8               	movlw	232
  2957  00149E  5C11               	subwf	my_ISR@read_ADC_Raw^0,w,c
  2958  0014A0  0E03               	movlw	3
  2959  0014A2  5812               	subwfb	(my_ISR@read_ADC_Raw+1)^0,w,c
  2960  0014A4  B0D8               	btfsc	status,0,c
  2961  0014A6  EF57  F00A         	goto	i2u79_41
  2962  0014AA  EF59  F00A         	goto	i2u79_40
  2963  0014AE                     i2u79_41:
  2964  0014AE  EF67  F00A         	goto	i2l2162
  2965  0014B2                     i2u79_40:
  2966  0014B2                     
  2967                           ;./ISR.h: 111:             result_ADC = (char)(read_ADC_Raw / 10);
  2968  0014B2  C011  F001         	movff	my_ISR@read_ADC_Raw,___lwdiv@dividend
  2969  0014B6  C012  F002         	movff	my_ISR@read_ADC_Raw+1,___lwdiv@dividend+1
  2970  0014BA  0E00               	movlw	0
  2971  0014BC  6E04               	movwf	(___lwdiv@divisor+1)^0,c
  2972  0014BE  0E0A               	movlw	10
  2973  0014C0  6E03               	movwf	___lwdiv@divisor^0,c
  2974  0014C2  EC19  F00D         	call	___lwdiv	;wreg free
  2975  0014C6  5001               	movf	?___lwdiv^0,w,c
  2976  0014C8  6E59               	movwf	_result_ADC^0,c
  2977                           
  2978                           ;./ISR.h: 112:         }
  2979  0014CA  EF69  F00A         	goto	i2l240
  2980  0014CE                     i2l2162:
  2981                           
  2982                           ;./ISR.h: 114:             result_ADC = 100;
  2983  0014CE  0E64               	movlw	100
  2984  0014D0  6E59               	movwf	_result_ADC^0,c
  2985  0014D2                     i2l240:
  2986                           
  2987                           ;./ISR.h: 118:         if ((firstTime == 0) && (safeState == 3)){
  2988  0014D2  5058               	movf	_firstTime^0,w,c
  2989  0014D4  A4D8               	btfss	status,2,c
  2990  0014D6  EF6F  F00A         	goto	i2u80_41
  2991  0014DA  EF71  F00A         	goto	i2u80_40
  2992  0014DE                     i2u80_41:
  2993  0014DE  EF7E  F00A         	goto	i2l2170
  2994  0014E2                     i2u80_40:
  2995  0014E2  0E03               	movlw	3
  2996  0014E4  1857               	xorwf	_safeState^0,w,c
  2997  0014E6  A4D8               	btfss	status,2,c
  2998  0014E8  EF78  F00A         	goto	i2u81_41
  2999  0014EC  EF7A  F00A         	goto	i2u81_40
  3000  0014F0                     i2u81_41:
  3001  0014F0  EF7E  F00A         	goto	i2l2170
  3002  0014F4                     i2u81_40:
  3003  0014F4                     
  3004                           ;./ISR.h: 119:              firstTime = 1;
  3005  0014F4  0E01               	movlw	1
  3006  0014F6  6E58               	movwf	_firstTime^0,c
  3007  0014F8                     
  3008                           ;./ISR.h: 122:         }
  3009  0014F8  EF89  F00A         	goto	i2l2174
  3010  0014FC                     i2l2170:
  3011  0014FC  5059               	movf	_result_ADC^0,w,c
  3012  0014FE  180F               	xorwf	my_ISR@before^0,w,c
  3013  001500  B4D8               	btfsc	status,2,c
  3014  001502  EF85  F00A         	goto	i2u82_41
  3015  001506  EF87  F00A         	goto	i2u82_40
  3016  00150A                     i2u82_41:
  3017  00150A  EF89  F00A         	goto	i2l2174
  3018  00150E                     i2u82_40:
  3019  00150E                     
  3020                           ;./ISR.h: 124:             start3 = 1;
  3021  00150E  0E01               	movlw	1
  3022  001510  6E56               	movwf	_start3^0,c
  3023  001512                     i2l2174:
  3024                           
  3025                           ;./ISR.h: 127:         ADIF = 0;
  3026  001512  9C9E               	bcf	3998,6,c	;volatile
  3027  001514                     i2l2176:
  3028                           
  3029                           ;./ISR.h: 130:    if (INT0IF == 1){
  3030  001514  A2F2               	btfss	4082,1,c	;volatile
  3031  001516  EF8F  F00A         	goto	i2u83_41
  3032  00151A  EF91  F00A         	goto	i2u83_40
  3033  00151E                     i2u83_41:
  3034  00151E  EFD6  F00A         	goto	i2l244
  3035  001522                     i2u83_40:
  3036  001522  EFBC  F00A         	goto	i2l2198
  3037  001526                     i2l2180:
  3038                           
  3039                           ;./ISR.h: 137:         if(result_ADC < 100){
  3040  001526  0E64               	movlw	100
  3041  001528  6059               	cpfslt	_result_ADC^0,c
  3042  00152A  EF99  F00A         	goto	i2u84_41
  3043  00152E  EF9B  F00A         	goto	i2u84_40
  3044  001532                     i2u84_41:
  3045  001532  EFD5  F00A         	goto	i2l247
  3046  001536                     i2u84_40:
  3047  001536                     i2l2182:
  3048                           
  3049                           ;./ISR.h: 139:             passwordsAttempt[digitEntryCount-1] = result_ADC;
  3050  001536  0E4B               	movlw	low (_passwordsAttempt+65535)
  3051  001538  245A               	addwf	_digitEntryCount^0,w,c
  3052  00153A  6ED9               	movwf	fsr2l,c
  3053  00153C  6ADA               	clrf	fsr2h,c
  3054  00153E  0E00               	movlw	high (_passwordsAttempt+65535)
  3055  001540  22DA               	addwfc	fsr2h,f,c
  3056  001542  C059  FFDF         	movff	_result_ADC,indf2
  3057  001546                     
  3058                           ;./ISR.h: 140:             digitEntryCount++;
  3059  001546  2A5A               	incf	_digitEntryCount^0,f,c
  3060  001548  EFD5  F00A         	goto	i2l247
  3061  00154C                     i2l2186:
  3062                           
  3063                           ;./ISR.h: 145:         if (digitEntryCount == 0){
  3064  00154C  505A               	movf	_digitEntryCount^0,w,c
  3065  00154E  A4D8               	btfss	status,2,c
  3066  001550  EFAC  F00A         	goto	i2u85_41
  3067  001554  EFAE  F00A         	goto	i2u85_40
  3068  001558                     i2u85_41:
  3069  001558  EFB2  F00A         	goto	i2l2190
  3070  00155C                     i2u85_40:
  3071  00155C                     
  3072                           ;./ISR.h: 146:             start3 = 1;
  3073  00155C  0E01               	movlw	1
  3074  00155E  6E56               	movwf	_start3^0,c
  3075                           
  3076                           ;./ISR.h: 147:             digitEntryCount = 1;
  3077  001560  0E01               	movlw	1
  3078  001562  6E5A               	movwf	_digitEntryCount^0,c
  3079  001564                     i2l2190:
  3080                           
  3081                           ;./ISR.h: 149:         if(result_ADC < 100){
  3082  001564  0E64               	movlw	100
  3083  001566  6059               	cpfslt	_result_ADC^0,c
  3084  001568  EFB8  F00A         	goto	i2u86_41
  3085  00156C  EFBA  F00A         	goto	i2u86_40
  3086  001570                     i2u86_41:
  3087  001570  EFD5  F00A         	goto	i2l247
  3088  001574                     i2u86_40:
  3089  001574  EF9B  F00A         	goto	i2l2182
  3090  001578                     i2l2198:
  3091  001578  5057               	movf	_safeState^0,w,c
  3092  00157A  6E09               	movwf	??_my_ISR^0,c
  3093  00157C  6A0A               	clrf	(??_my_ISR+1)^0,c
  3094                           
  3095                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3096                           ; Switch size 1, requested type "simple"
  3097                           ; Number of cases is 1, Range of values is 0 to 0
  3098                           ; switch strategies available:
  3099                           ; Name         Instructions Cycles
  3100                           ; simple_byte            4     3 (average)
  3101                           ;	Chosen strategy is simple_byte
  3102  00157E  500A               	movf	(??_my_ISR+1)^0,w,c
  3103  001580  0A00               	xorlw	0	; case 0
  3104  001582  B4D8               	btfsc	status,2,c
  3105  001584  EFC6  F00A         	goto	i2l2504
  3106  001588  EFD5  F00A         	goto	i2l247
  3107  00158C                     i2l2504:
  3108                           
  3109                           ; Switch size 1, requested type "simple"
  3110                           ; Number of cases is 3, Range of values is 1 to 3
  3111                           ; switch strategies available:
  3112                           ; Name         Instructions Cycles
  3113                           ; simple_byte           10     6 (average)
  3114                           ;	Chosen strategy is simple_byte
  3115  00158C  5009               	movf	??_my_ISR^0,w,c
  3116  00158E  0A01               	xorlw	1	; case 1
  3117  001590  B4D8               	btfsc	status,2,c
  3118  001592  EFD5  F00A         	goto	i2l247
  3119  001596  0A03               	xorlw	3	; case 2
  3120  001598  B4D8               	btfsc	status,2,c
  3121  00159A  EF93  F00A         	goto	i2l2180
  3122  00159E  0A01               	xorlw	1	; case 3
  3123  0015A0  B4D8               	btfsc	status,2,c
  3124  0015A2  EFA6  F00A         	goto	i2l2186
  3125  0015A6  EFD5  F00A         	goto	i2l247
  3126  0015AA                     i2l247:
  3127                           
  3128                           ;./ISR.h: 160:         INT0IF = 0;
  3129  0015AA  92F2               	bcf	4082,1,c	;volatile
  3130  0015AC                     i2l244:
  3131                           
  3132                           ;./ISR.h: 200:     if (RBIF == 1){
  3133  0015AC  A0F2               	btfss	4082,0,c	;volatile
  3134  0015AE  EFDB  F00A         	goto	i2u87_41
  3135  0015B2  EFDD  F00A         	goto	i2u87_40
  3136  0015B6                     i2u87_41:
  3137  0015B6  EFF6  F00A         	goto	i2l2212
  3138  0015BA                     i2u87_40:
  3139  0015BA                     
  3140                           ;./ISR.h: 201:         portData = 0x00;
  3141  0015BA  0E00               	movlw	0
  3142  0015BC  6E10               	movwf	my_ISR@portData^0,c
  3143  0015BE                     
  3144                           ;./ISR.h: 202:         portData |= PORTB;
  3145  0015BE  5081               	movf	129,w,c	;volatile
  3146  0015C0  1210               	iorwf	my_ISR@portData^0,f,c
  3147  0015C2                     
  3148                           ;./ISR.h: 203:         if ((portData & 0x10) == 1){
  3149  0015C2  5010               	movf	my_ISR@portData^0,w,c
  3150  0015C4  0B10               	andlw	16
  3151  0015C6  06E8               	decf	wreg,f,c
  3152  0015C8  A4D8               	btfss	status,2,c
  3153  0015CA  EFE9  F00A         	goto	i2u88_41
  3154  0015CE  EFEB  F00A         	goto	i2u88_40
  3155  0015D2                     i2u88_41:
  3156  0015D2  EFF1  F00A         	goto	i2l2208
  3157  0015D6                     i2u88_40:
  3158  0015D6                     
  3159                           ;./ISR.h: 204:            lockAgain = 1;
  3160  0015D6  0E00               	movlw	0
  3161  0015D8  6E50               	movwf	(_lockAgain+1)^0,c
  3162  0015DA  0E01               	movlw	1
  3163  0015DC  6E4F               	movwf	_lockAgain^0,c
  3164                           
  3165                           ;./ISR.h: 205:         }
  3166  0015DE  EFF5  F00A         	goto	i2l2210
  3167  0015E2                     i2l2208:
  3168  0015E2  0E00               	movlw	0
  3169  0015E4  6E50               	movwf	(_lockAgain+1)^0,c
  3170  0015E6  0E00               	movlw	0
  3171  0015E8  6E4F               	movwf	_lockAgain^0,c
  3172  0015EA                     i2l2210:
  3173                           
  3174                           ;./ISR.h: 208:         RBIF = 0;
  3175  0015EA  90F2               	bcf	4082,0,c	;volatile
  3176  0015EC                     i2l2212:
  3177                           
  3178                           ;./ISR.h: 212:     if(TMR0IF == 1){
  3179  0015EC  A4F2               	btfss	4082,2,c	;volatile
  3180  0015EE  EFFB  F00A         	goto	i2u89_41
  3181  0015F2  EFFD  F00A         	goto	i2u89_40
  3182  0015F6                     i2u89_41:
  3183  0015F6  EF3E  F00B         	goto	i2l2244
  3184  0015FA                     i2u89_40:
  3185  0015FA                     
  3186                           ;./ISR.h: 214:         displayData[2] = downCounter90s / 10;
  3187  0015FA  C044  F001         	movff	_downCounter90s,i2___awdiv@dividend
  3188  0015FE  6A02               	clrf	(i2___awdiv@dividend+1)^0,c
  3189  001600  0E00               	movlw	0
  3190  001602  6E04               	movwf	(i2___awdiv@divisor+1)^0,c
  3191  001604  0E0A               	movlw	10
  3192  001606  6E03               	movwf	i2___awdiv@divisor^0,c
  3193  001608  EC72  F00C         	call	i2___awdiv	;wreg free
  3194  00160C  5001               	movf	?i2___awdiv^0,w,c
  3195  00160E  6E47               	movwf	(_displayData+2)^0,c
  3196  001610                     
  3197                           ;./ISR.h: 215:         displayData[3] = downCounter90s - (displayData[2] * 10);
  3198  001610  5047               	movf	(_displayData+2)^0,w,c
  3199  001612  0DF6               	mullw	246
  3200  001614  50F3               	movf	243,w,c
  3201  001616  2444               	addwf	_downCounter90s^0,w,c
  3202  001618  6E48               	movwf	(_displayData+3)^0,c
  3203  00161A                     
  3204                           ;./ISR.h: 217:         halfSec= ~(halfSec);
  3205  00161A  1E54               	comf	my_ISR@halfSec^0,f,c
  3206  00161C                     
  3207                           ;./ISR.h: 218:         if (halfSec){
  3208  00161C  5054               	movf	my_ISR@halfSec^0,w,c
  3209  00161E  B4D8               	btfsc	status,2,c
  3210  001620  EF14  F00B         	goto	i2u90_41
  3211  001624  EF16  F00B         	goto	i2u90_40
  3212  001628                     i2u90_41:
  3213  001628  EF1F  F00B         	goto	i2l2226
  3214  00162C                     i2u90_40:
  3215  00162C                     
  3216                           ;./ISR.h: 220:             if (downCounter90s != 0) {
  3217  00162C  5044               	movf	_downCounter90s^0,w,c
  3218  00162E  B4D8               	btfsc	status,2,c
  3219  001630  EF1C  F00B         	goto	i2u91_41
  3220  001634  EF1E  F00B         	goto	i2u91_40
  3221  001638                     i2u91_41:
  3222  001638  EF1F  F00B         	goto	i2l2226
  3223  00163C                     i2u91_40:
  3224  00163C                     
  3225                           ;./ISR.h: 221:             downCounter90s--;
  3226  00163C  0644               	decf	_downCounter90s^0,f,c
  3227  00163E                     i2l2226:
  3228                           
  3229                           ;./ISR.h: 225:         if (blinkEnable){
  3230  00163E  5055               	movf	_blinkEnable^0,w,c
  3231  001640  B4D8               	btfsc	status,2,c
  3232  001642  EF25  F00B         	goto	i2u92_41
  3233  001646  EF27  F00B         	goto	i2u92_40
  3234  00164A                     i2u92_41:
  3235  00164A  EF39  F00B         	goto	i2l2238
  3236  00164E                     i2u92_40:
  3237  00164E                     
  3238                           ;./ISR.h: 226:             INT0IE = 0;
  3239  00164E  98F2               	bcf	4082,4,c	;volatile
  3240  001650                     
  3241                           ;./ISR.h: 227:             if (halfSec){
  3242  001650  5054               	movf	my_ISR@halfSec^0,w,c
  3243  001652  B4D8               	btfsc	status,2,c
  3244  001654  EF2E  F00B         	goto	i2u93_41
  3245  001658  EF30  F00B         	goto	i2u93_40
  3246  00165C                     i2u93_41:
  3247  00165C  EF34  F00B         	goto	i2l2234
  3248  001660                     i2u93_40:
  3249  001660                     
  3250                           ;./ISR.h: 228:                 TRISB = 0xFF;
  3251  001660  6893               	setf	147,c	;volatile
  3252                           
  3253                           ;./ISR.h: 229:                 PORTB = 0xFF;
  3254  001662  6881               	setf	129,c	;volatile
  3255                           
  3256                           ;./ISR.h: 230:             }
  3257  001664  EF38  F00B         	goto	i2l2236
  3258  001668                     i2l2234:
  3259                           
  3260                           ;./ISR.h: 232:                 PORTB &= 0x00;
  3261  001668  0E00               	movlw	0
  3262  00166A  6E81               	movwf	129,c	;volatile
  3263                           
  3264                           ;./ISR.h: 233:                 TRISB = 0x11;
  3265  00166C  0E11               	movlw	17
  3266  00166E  6E93               	movwf	147,c	;volatile
  3267  001670                     i2l2236:
  3268                           
  3269                           ;./ISR.h: 237:             INT0IE = 1;
  3270  001670  88F2               	bsf	4082,4,c	;volatile
  3271  001672                     i2l2238:
  3272                           
  3273                           ;./ISR.h: 241:         TMR0H = (char)(TIM0LOAD >> 8);
  3274  001672  C03F  FFD7         	movff	_TIM0LOAD+1,4055	;volatile
  3275  001676                     
  3276                           ;./ISR.h: 242:         TMR0L = (char)(TIM0LOAD - (TMR0H << 8));
  3277  001676  C03E  FFD6         	movff	_TIM0LOAD,4054	;volatile
  3278  00167A                     
  3279                           ;./ISR.h: 244:         TMR0IF = 0;
  3280  00167A  94F2               	bcf	4082,2,c	;volatile
  3281  00167C                     i2l2244:
  3282                           
  3283                           ;./ISR.h: 251:     if (TMR1IF == 1) {
  3284  00167C  A09E               	btfss	3998,0,c	;volatile
  3285  00167E  EF43  F00B         	goto	i2u94_41
  3286  001682  EF45  F00B         	goto	i2u94_40
  3287  001686                     i2u94_41:
  3288  001686  EF92  F00B         	goto	i2l2282
  3289  00168A                     i2u94_40:
  3290  00168A                     
  3291                           ;./ISR.h: 254:         TRISD = 0x00;
  3292  00168A  0E00               	movlw	0
  3293  00168C  6E95               	movwf	149,c	;volatile
  3294                           
  3295                           ;./ISR.h: 255:         TRISA = 0xC3;
  3296  00168E  0EC3               	movlw	195
  3297  001690  6E92               	movwf	146,c	;volatile
  3298                           
  3299                           ;./ISR.h: 256:         PORTA &= 0;
  3300  001692  0E00               	movlw	0
  3301  001694  6E80               	movwf	128,c	;volatile
  3302  001696                     
  3303                           ;./ISR.h: 261:         PORTE &= ~(1UL << 1);
  3304  001696  9284               	bcf	132,1,c	;volatile
  3305  001698                     
  3306                           ;./ISR.h: 263:         PORTD = segmentData[displayData[0]];
  3307  001698  0E2A               	movlw	low _segmentData
  3308  00169A  2445               	addwf	_displayData^0,w,c
  3309  00169C  6ED9               	movwf	fsr2l,c
  3310  00169E  6ADA               	clrf	fsr2h,c
  3311  0016A0  0E00               	movlw	high _segmentData
  3312  0016A2  22DA               	addwfc	fsr2h,f,c
  3313  0016A4  50DF               	movf	indf2,w,c
  3314  0016A6  6E83               	movwf	131,c	;volatile
  3315  0016A8                     
  3316                           ;./ISR.h: 264:         PORTA |= 0x04;
  3317  0016A8  8480               	bsf	128,2,c	;volatile
  3318  0016AA                     
  3319                           ;./ISR.h: 267:         PORTA &= 0;
  3320  0016AA  0E00               	movlw	0
  3321  0016AC  6E80               	movwf	128,c	;volatile
  3322                           
  3323                           ;./ISR.h: 269:         PORTD = segmentData[displayData[1]];
  3324  0016AE  0E2A               	movlw	low _segmentData
  3325  0016B0  2446               	addwf	(_displayData+1)^0,w,c
  3326  0016B2  6ED9               	movwf	fsr2l,c
  3327  0016B4  6ADA               	clrf	fsr2h,c
  3328  0016B6  0E00               	movlw	high _segmentData
  3329  0016B8  22DA               	addwfc	fsr2h,f,c
  3330  0016BA  50DF               	movf	indf2,w,c
  3331  0016BC  6E83               	movwf	131,c	;volatile
  3332  0016BE                     
  3333                           ;./ISR.h: 270:         PORTA |= 0x08;
  3334  0016BE  8680               	bsf	128,3,c	;volatile
  3335  0016C0                     
  3336                           ;./ISR.h: 271:         _delay((unsigned long)((10)*(4000000L/4000.0)));
  3337  0016C0  0E0D               	movlw	13
  3338  0016C2  6E09               	movwf	??_my_ISR^0,c
  3339  0016C4  0EFC               	movlw	252
  3340  0016C6                     i2u113_47:
  3341  0016C6  2EE8               	decfsz	wreg,f,c
  3342  0016C8  D7FE               	bra	i2u113_47
  3343  0016CA  2E09               	decfsz	??_my_ISR^0,f,c
  3344  0016CC  D7FC               	bra	i2u113_47
  3345  0016CE                     
  3346                           ;./ISR.h: 273:         PORTA &= 0;
  3347  0016CE  0E00               	movlw	0
  3348  0016D0  6E80               	movwf	128,c	;volatile
  3349  0016D2                     
  3350                           ;./ISR.h: 275:         PORTD = segmentData[displayData[2]];
  3351  0016D2  0E2A               	movlw	low _segmentData
  3352  0016D4  2447               	addwf	(_displayData+2)^0,w,c
  3353  0016D6  6ED9               	movwf	fsr2l,c
  3354  0016D8  6ADA               	clrf	fsr2h,c
  3355  0016DA  0E00               	movlw	high _segmentData
  3356  0016DC  22DA               	addwfc	fsr2h,f,c
  3357  0016DE  50DF               	movf	indf2,w,c
  3358  0016E0  6E83               	movwf	131,c	;volatile
  3359  0016E2                     
  3360                           ;./ISR.h: 276:         PORTA |= 0x10;
  3361  0016E2  8880               	bsf	128,4,c	;volatile
  3362  0016E4                     
  3363                           ;./ISR.h: 277:         _delay((unsigned long)((10)*(4000000L/4000.0)));
  3364  0016E4  0E0D               	movlw	13
  3365  0016E6  6E09               	movwf	??_my_ISR^0,c
  3366  0016E8  0EFC               	movlw	252
  3367  0016EA                     i2u114_47:
  3368  0016EA  2EE8               	decfsz	wreg,f,c
  3369  0016EC  D7FE               	bra	i2u114_47
  3370  0016EE  2E09               	decfsz	??_my_ISR^0,f,c
  3371  0016F0  D7FC               	bra	i2u114_47
  3372                           
  3373                           ;./ISR.h: 279:         PORTA &= 0;
  3374  0016F2  0E00               	movlw	0
  3375  0016F4  6E80               	movwf	128,c	;volatile
  3376  0016F6                     
  3377                           ;./ISR.h: 281:         PORTD = segmentData[displayData[3]];
  3378  0016F6  0E2A               	movlw	low _segmentData
  3379  0016F8  2448               	addwf	(_displayData+3)^0,w,c
  3380  0016FA  6ED9               	movwf	fsr2l,c
  3381  0016FC  6ADA               	clrf	fsr2h,c
  3382  0016FE  0E00               	movlw	high _segmentData
  3383  001700  22DA               	addwfc	fsr2h,f,c
  3384  001702  50DF               	movf	indf2,w,c
  3385  001704  6E83               	movwf	131,c	;volatile
  3386  001706                     
  3387                           ;./ISR.h: 282:         PORTA |= 0x20;
  3388  001706  8A80               	bsf	128,5,c	;volatile
  3389  001708                     
  3390                           ;./ISR.h: 283:         _delay((unsigned long)((10)*(4000000L/4000.0)));
  3391  001708  0E0D               	movlw	13
  3392  00170A  6E09               	movwf	??_my_ISR^0,c
  3393  00170C  0EFC               	movlw	252
  3394  00170E                     i2u115_47:
  3395  00170E  2EE8               	decfsz	wreg,f,c
  3396  001710  D7FE               	bra	i2u115_47
  3397  001712  2E09               	decfsz	??_my_ISR^0,f,c
  3398  001714  D7FC               	bra	i2u115_47
  3399  001716                     
  3400                           ;./ISR.h: 285:         PORTA &= 0;
  3401  001716  0E00               	movlw	0
  3402  001718  6E80               	movwf	128,c	;volatile
  3403  00171A                     
  3404                           ;./ISR.h: 287:         TMR1H = (char)(TIM1LOAD >> 8);
  3405  00171A  C03B  FFCF         	movff	_TIM1LOAD+1,4047	;volatile
  3406  00171E                     
  3407                           ;./ISR.h: 288:         TMR1L = (char)(TIM1LOAD - (TMR1H << 8));
  3408  00171E  C03A  FFCE         	movff	_TIM1LOAD,4046	;volatile
  3409  001722                     
  3410                           ;./ISR.h: 291:         TMR1IF = 0;
  3411  001722  909E               	bcf	3998,0,c	;volatile
  3412  001724                     i2l2282:
  3413                           
  3414                           ;./ISR.h: 295:     if(TMR2IF == 1){
  3415  001724  A29E               	btfss	3998,1,c	;volatile
  3416  001726  EF97  F00B         	goto	i2u95_41
  3417  00172A  EF99  F00B         	goto	i2u95_40
  3418  00172E                     i2u95_41:
  3419  00172E  EF9C  F00B         	goto	i2l265
  3420  001732                     i2u95_40:
  3421  001732                     
  3422                           ;./ISR.h: 296:         TMR2Counter++;
  3423  001732  4A51               	infsnz	_TMR2Counter^0,f,c
  3424  001734  2A52               	incf	(_TMR2Counter+1)^0,f,c
  3425  001736                     
  3426                           ;./ISR.h: 297:         TMR2IF = 0;
  3427  001736  929E               	bcf	3998,1,c	;volatile
  3428  001738                     i2l265:
  3429  001738  C00E  FFF4         	movff	??_my_ISR+5,prodh
  3430  00173C  C00D  FFF3         	movff	??_my_ISR+4,prodl
  3431  001740  C00C  FFDA         	movff	??_my_ISR+3,fsr2h
  3432  001744  C00B  FFD9         	movff	??_my_ISR+2,fsr2l
  3433  001748  925B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3434  00174A  0011               	retfie		f
  3435  00174C                     __end_of_my_ISR:
  3436                           	callstack 0
  3437                           
  3438 ;; *************** function i2___awdiv *****************
  3439 ;; Defined at:
  3440 ;;		line 7 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/awdiv.c"
  3441 ;; Parameters:    Size  Location     Type
  3442 ;;  dividend        2    0[COMRAM] int 
  3443 ;;  divisor         2    2[COMRAM] int 
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;  quotient        2    6[COMRAM] int 
  3446 ;;  sign            1    5[COMRAM] unsigned char 
  3447 ;;  counter         1    4[COMRAM] unsigned char 
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  2    0[COMRAM] int 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3457 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3460 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3461 ;;Total ram usage:        8 bytes
  3462 ;; Hardware stack levels used: 1
  3463 ;; This function calls:
  3464 ;;		Nothing
  3465 ;; This function is called by:
  3466 ;;		_my_ISR
  3467 ;; This function uses a non-reentrant model
  3468 ;;
  3469                           
  3470                           	psect	text20
  3471  0018E4                     __ptext20:
  3472                           	callstack 0
  3473  0018E4                     i2___awdiv:
  3474                           	callstack 26
  3475  0018E4  0E00               	movlw	0
  3476  0018E6  6E06               	movwf	i2___awdiv@sign^0,c
  3477  0018E8  BE04               	btfsc	(i2___awdiv@divisor+1)^0,7,c
  3478  0018EA  EF7B  F00C         	goto	i2u71_40
  3479  0018EE  EF79  F00C         	goto	i2u71_41
  3480  0018F2                     i2u71_41:
  3481  0018F2  EF81  F00C         	goto	i2l2110
  3482  0018F6                     i2u71_40:
  3483  0018F6  6C03               	negf	i2___awdiv@divisor^0,c
  3484  0018F8  1E04               	comf	(i2___awdiv@divisor+1)^0,f,c
  3485  0018FA  B0D8               	btfsc	status,0,c
  3486  0018FC  2A04               	incf	(i2___awdiv@divisor+1)^0,f,c
  3487  0018FE  0E01               	movlw	1
  3488  001900  6E06               	movwf	i2___awdiv@sign^0,c
  3489  001902                     i2l2110:
  3490  001902  BE02               	btfsc	(i2___awdiv@dividend+1)^0,7,c
  3491  001904  EF88  F00C         	goto	i2u72_40
  3492  001908  EF86  F00C         	goto	i2u72_41
  3493  00190C                     i2u72_41:
  3494  00190C  EF8E  F00C         	goto	i2l2116
  3495  001910                     i2u72_40:
  3496  001910  6C01               	negf	i2___awdiv@dividend^0,c
  3497  001912  1E02               	comf	(i2___awdiv@dividend+1)^0,f,c
  3498  001914  B0D8               	btfsc	status,0,c
  3499  001916  2A02               	incf	(i2___awdiv@dividend+1)^0,f,c
  3500  001918  0E01               	movlw	1
  3501  00191A  1A06               	xorwf	i2___awdiv@sign^0,f,c
  3502  00191C                     i2l2116:
  3503  00191C  0E00               	movlw	0
  3504  00191E  6E08               	movwf	(i2___awdiv@quotient+1)^0,c
  3505  001920  0E00               	movlw	0
  3506  001922  6E07               	movwf	i2___awdiv@quotient^0,c
  3507  001924  5003               	movf	i2___awdiv@divisor^0,w,c
  3508  001926  1004               	iorwf	(i2___awdiv@divisor+1)^0,w,c
  3509  001928  B4D8               	btfsc	status,2,c
  3510  00192A  EF99  F00C         	goto	i2u73_41
  3511  00192E  EF9B  F00C         	goto	i2u73_40
  3512  001932                     i2u73_41:
  3513  001932  EFC3  F00C         	goto	i2l2138
  3514  001936                     i2u73_40:
  3515  001936  0E01               	movlw	1
  3516  001938  6E05               	movwf	i2___awdiv@counter^0,c
  3517  00193A  EFA3  F00C         	goto	i2l2124
  3518  00193E                     i2l2122:
  3519  00193E  90D8               	bcf	status,0,c
  3520  001940  3603               	rlcf	i2___awdiv@divisor^0,f,c
  3521  001942  3604               	rlcf	(i2___awdiv@divisor+1)^0,f,c
  3522  001944  2A05               	incf	i2___awdiv@counter^0,f,c
  3523  001946                     i2l2124:
  3524  001946  AE04               	btfss	(i2___awdiv@divisor+1)^0,7,c
  3525  001948  EFA8  F00C         	goto	i2u74_41
  3526  00194C  EFAA  F00C         	goto	i2u74_40
  3527  001950                     i2u74_41:
  3528  001950  EF9F  F00C         	goto	i2l2122
  3529  001954                     i2u74_40:
  3530  001954                     i2l2126:
  3531  001954  90D8               	bcf	status,0,c
  3532  001956  3607               	rlcf	i2___awdiv@quotient^0,f,c
  3533  001958  3608               	rlcf	(i2___awdiv@quotient+1)^0,f,c
  3534  00195A  5003               	movf	i2___awdiv@divisor^0,w,c
  3535  00195C  5C01               	subwf	i2___awdiv@dividend^0,w,c
  3536  00195E  5004               	movf	(i2___awdiv@divisor+1)^0,w,c
  3537  001960  5802               	subwfb	(i2___awdiv@dividend+1)^0,w,c
  3538  001962  A0D8               	btfss	status,0,c
  3539  001964  EFB6  F00C         	goto	i2u75_41
  3540  001968  EFB8  F00C         	goto	i2u75_40
  3541  00196C                     i2u75_41:
  3542  00196C  EFBD  F00C         	goto	i2l2134
  3543  001970                     i2u75_40:
  3544  001970  5003               	movf	i2___awdiv@divisor^0,w,c
  3545  001972  5E01               	subwf	i2___awdiv@dividend^0,f,c
  3546  001974  5004               	movf	(i2___awdiv@divisor+1)^0,w,c
  3547  001976  5A02               	subwfb	(i2___awdiv@dividend+1)^0,f,c
  3548  001978  8007               	bsf	i2___awdiv@quotient^0,0,c
  3549  00197A                     i2l2134:
  3550  00197A  90D8               	bcf	status,0,c
  3551  00197C  3204               	rrcf	(i2___awdiv@divisor+1)^0,f,c
  3552  00197E  3203               	rrcf	i2___awdiv@divisor^0,f,c
  3553  001980  2E05               	decfsz	i2___awdiv@counter^0,f,c
  3554  001982  EFAA  F00C         	goto	i2l2126
  3555  001986                     i2l2138:
  3556  001986  5006               	movf	i2___awdiv@sign^0,w,c
  3557  001988  B4D8               	btfsc	status,2,c
  3558  00198A  EFC9  F00C         	goto	i2u76_41
  3559  00198E  EFCB  F00C         	goto	i2u76_40
  3560  001992                     i2u76_41:
  3561  001992  EFCF  F00C         	goto	i2l2142
  3562  001996                     i2u76_40:
  3563  001996  6C07               	negf	i2___awdiv@quotient^0,c
  3564  001998  1E08               	comf	(i2___awdiv@quotient+1)^0,f,c
  3565  00199A  B0D8               	btfsc	status,0,c
  3566  00199C  2A08               	incf	(i2___awdiv@quotient+1)^0,f,c
  3567  00199E                     i2l2142:
  3568  00199E  C007  F001         	movff	i2___awdiv@quotient,?i2___awdiv
  3569  0019A2  C008  F002         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
  3570  0019A6  0012               	return		;funcret
  3571  0019A8                     __end_ofi2___awdiv:
  3572                           	callstack 0
  3573                           
  3574 ;; *************** function ___lwdiv *****************
  3575 ;; Defined at:
  3576 ;;		line 7 in file "/opt/microchip/xc8/v2.32/pic/sources/c99/common/lwdiv.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  dividend        2    0[COMRAM] unsigned int 
  3579 ;;  divisor         2    2[COMRAM] unsigned int 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  quotient        2    4[COMRAM] unsigned int 
  3582 ;;  counter         1    6[COMRAM] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  2    0[COMRAM] unsigned int 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3592 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;Total ram usage:        7 bytes
  3597 ;; Hardware stack levels used: 1
  3598 ;; This function calls:
  3599 ;;		Nothing
  3600 ;; This function is called by:
  3601 ;;		_my_ISR
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text21
  3606  001A32                     __ptext21:
  3607                           	callstack 0
  3608  001A32                     ___lwdiv:
  3609                           	callstack 26
  3610  001A32  0E00               	movlw	0
  3611  001A34  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  3612  001A36  0E00               	movlw	0
  3613  001A38  6E05               	movwf	___lwdiv@quotient^0,c
  3614  001A3A  5003               	movf	___lwdiv@divisor^0,w,c
  3615  001A3C  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  3616  001A3E  B4D8               	btfsc	status,2,c
  3617  001A40  EF24  F00D         	goto	i2u68_41
  3618  001A44  EF26  F00D         	goto	i2u68_40
  3619  001A48                     i2u68_41:
  3620  001A48  EF4E  F00D         	goto	i2l850
  3621  001A4C                     i2u68_40:
  3622  001A4C  0E01               	movlw	1
  3623  001A4E  6E07               	movwf	___lwdiv@counter^0,c
  3624  001A50  EF2E  F00D         	goto	i2l2088
  3625  001A54                     i2l2086:
  3626  001A54  90D8               	bcf	status,0,c
  3627  001A56  3603               	rlcf	___lwdiv@divisor^0,f,c
  3628  001A58  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  3629  001A5A  2A07               	incf	___lwdiv@counter^0,f,c
  3630  001A5C                     i2l2088:
  3631  001A5C  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  3632  001A5E  EF33  F00D         	goto	i2u69_41
  3633  001A62  EF35  F00D         	goto	i2u69_40
  3634  001A66                     i2u69_41:
  3635  001A66  EF2A  F00D         	goto	i2l2086
  3636  001A6A                     i2u69_40:
  3637  001A6A                     i2l2090:
  3638  001A6A  90D8               	bcf	status,0,c
  3639  001A6C  3605               	rlcf	___lwdiv@quotient^0,f,c
  3640  001A6E  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  3641  001A70  5003               	movf	___lwdiv@divisor^0,w,c
  3642  001A72  5C01               	subwf	___lwdiv@dividend^0,w,c
  3643  001A74  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  3644  001A76  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  3645  001A78  A0D8               	btfss	status,0,c
  3646  001A7A  EF41  F00D         	goto	i2u70_41
  3647  001A7E  EF43  F00D         	goto	i2u70_40
  3648  001A82                     i2u70_41:
  3649  001A82  EF48  F00D         	goto	i2l2098
  3650  001A86                     i2u70_40:
  3651  001A86  5003               	movf	___lwdiv@divisor^0,w,c
  3652  001A88  5E01               	subwf	___lwdiv@dividend^0,f,c
  3653  001A8A  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  3654  001A8C  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  3655  001A8E  8005               	bsf	___lwdiv@quotient^0,0,c
  3656  001A90                     i2l2098:
  3657  001A90  90D8               	bcf	status,0,c
  3658  001A92  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  3659  001A94  3203               	rrcf	___lwdiv@divisor^0,f,c
  3660  001A96  2E07               	decfsz	___lwdiv@counter^0,f,c
  3661  001A98  EF35  F00D         	goto	i2l2090
  3662  001A9C                     i2l850:
  3663  001A9C  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  3664  001AA0  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3665  001AA4  0012               	return		;funcret
  3666  001AA6                     __end_of___lwdiv:
  3667                           	callstack 0
  3668                           
  3669                           	psect	rparam
  3670  0000                     
  3671                           	psect	temp
  3672  00005B                     btemp:
  3673                           	callstack 0
  3674  00005B                     	ds	1
  3675  0000                     int$flags	set	btemp
  3676  0000                     wtemp8	set	btemp+1
  3677  0000                     ttemp5	set	btemp+1
  3678  0000                     ttemp6	set	btemp+4
  3679  0000                     ttemp7	set	btemp+8
  3680                           
  3681                           	psect	idloc
  3682                           
  3683                           ;Config register IDLOC0 @ 0x200000
  3684                           ;	unspecified, using default values
  3685  200000                     	org	2097152
  3686  200000  FF                 	db	255
  3687                           
  3688                           ;Config register IDLOC1 @ 0x200001
  3689                           ;	unspecified, using default values
  3690  200001                     	org	2097153
  3691  200001  FF                 	db	255
  3692                           
  3693                           ;Config register IDLOC2 @ 0x200002
  3694                           ;	unspecified, using default values
  3695  200002                     	org	2097154
  3696  200002  FF                 	db	255
  3697                           
  3698                           ;Config register IDLOC3 @ 0x200003
  3699                           ;	unspecified, using default values
  3700  200003                     	org	2097155
  3701  200003  FF                 	db	255
  3702                           
  3703                           ;Config register IDLOC4 @ 0x200004
  3704                           ;	unspecified, using default values
  3705  200004                     	org	2097156
  3706  200004  FF                 	db	255
  3707                           
  3708                           ;Config register IDLOC5 @ 0x200005
  3709                           ;	unspecified, using default values
  3710  200005                     	org	2097157
  3711  200005  FF                 	db	255
  3712                           
  3713                           ;Config register IDLOC6 @ 0x200006
  3714                           ;	unspecified, using default values
  3715  200006                     	org	2097158
  3716  200006  FF                 	db	255
  3717                           
  3718                           ;Config register IDLOC7 @ 0x200007
  3719                           ;	unspecified, using default values
  3720  200007                     	org	2097159
  3721  200007  FF                 	db	255
  3722                           
  3723                           	psect	config
  3724                           
  3725                           ; Padding undefined space
  3726  300000                     	org	3145728
  3727  300000  FF                 	db	255
  3728                           
  3729                           ;Config register CONFIG1H @ 0x300001
  3730                           ;	Oscillator Selection bits
  3731                           ;	OSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3732                           ;	Fail-Safe Clock Monitor Enable bit
  3733                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3734                           ;	Internal/External Oscillator Switchover bit
  3735                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3736  300001                     	org	3145729
  3737  300001  08                 	db	8
  3738                           
  3739                           ;Config register CONFIG2L @ 0x300002
  3740                           ;	Power-up Timer Enable bit
  3741                           ;	PWRT = OFF, PWRT disabled
  3742                           ;	Brown-out Reset Enable bits
  3743                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3744                           ;	Brown Out Reset Voltage bits
  3745                           ;	BORV = 3, Minimum setting
  3746  300002                     	org	3145730
  3747  300002  1F                 	db	31
  3748                           
  3749                           ;Config register CONFIG2H @ 0x300003
  3750                           ;	Watchdog Timer Enable bit
  3751                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3752                           ;	Watchdog Timer Postscale Select bits
  3753                           ;	WDTPS = 32768, 1:32768
  3754  300003                     	org	3145731
  3755  300003  1E                 	db	30
  3756                           
  3757                           ; Padding undefined space
  3758  300004                     	org	3145732
  3759  300004  FF                 	db	255
  3760                           
  3761                           ;Config register CONFIG3H @ 0x300005
  3762                           ;	CCP2 MUX bit
  3763                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3764                           ;	PORTB A/D Enable bit
  3765                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3766                           ;	Low-Power Timer1 Oscillator Enable bit
  3767                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3768                           ;	MCLR Pin Enable bit
  3769                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3770  300005                     	org	3145733
  3771  300005  81                 	db	129
  3772                           
  3773                           ;Config register CONFIG4L @ 0x300006
  3774                           ;	Stack Full/Underflow Reset Enable bit
  3775                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3776                           ;	Single-Supply ICSP Enable bit
  3777                           ;	LVP = OFF, Single-Supply ICSP disabled
  3778                           ;	Extended Instruction Set Enable bit
  3779                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3780                           ;	Background Debugger Enable bit
  3781                           ;	DEBUG = 0x1, unprogrammed default
  3782  300006                     	org	3145734
  3783  300006  81                 	db	129
  3784                           
  3785                           ; Padding undefined space
  3786  300007                     	org	3145735
  3787  300007  FF                 	db	255
  3788                           
  3789                           ;Config register CONFIG5L @ 0x300008
  3790                           ;	Code Protection bit
  3791                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3792                           ;	Code Protection bit
  3793                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3794                           ;	Code Protection bit
  3795                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3796                           ;	Code Protection bit
  3797                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3798  300008                     	org	3145736
  3799  300008  0F                 	db	15
  3800                           
  3801                           ;Config register CONFIG5H @ 0x300009
  3802                           ;	Boot Block Code Protection bit
  3803                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3804                           ;	Data EEPROM Code Protection bit
  3805                           ;	CPD = OFF, Data EEPROM not code-protected
  3806  300009                     	org	3145737
  3807  300009  C0                 	db	192
  3808                           
  3809                           ;Config register CONFIG6L @ 0x30000A
  3810                           ;	Write Protection bit
  3811                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3812                           ;	Write Protection bit
  3813                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3814                           ;	Write Protection bit
  3815                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3816                           ;	Write Protection bit
  3817                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  3818  30000A                     	org	3145738
  3819  30000A  0F                 	db	15
  3820                           
  3821                           ;Config register CONFIG6H @ 0x30000B
  3822                           ;	Configuration Register Write Protection bit
  3823                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3824                           ;	Boot Block Write Protection bit
  3825                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3826                           ;	Data EEPROM Write Protection bit
  3827                           ;	WRTD = OFF, Data EEPROM not write-protected
  3828  30000B                     	org	3145739
  3829  30000B  E0                 	db	224
  3830                           
  3831                           ;Config register CONFIG7L @ 0x30000C
  3832                           ;	Table Read Protection bit
  3833                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  3834                           ;	Table Read Protection bit
  3835                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  3836                           ;	Table Read Protection bit
  3837                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  3838                           ;	Table Read Protection bit
  3839                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  3840  30000C                     	org	3145740
  3841  30000C  0F                 	db	15
  3842                           
  3843                           ;Config register CONFIG7H @ 0x30000D
  3844                           ;	Boot Block Table Read Protection bit
  3845                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3846  30000D                     	org	3145741
  3847  30000D  40                 	db	64
  3848                           tosu	equ	0xFFF
  3849                           tosh	equ	0xFFE
  3850                           tosl	equ	0xFFD
  3851                           stkptr	equ	0xFFC
  3852                           pclatu	equ	0xFFB
  3853                           pclath	equ	0xFFA
  3854                           pcl	equ	0xFF9
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           prodh	equ	0xFF4
  3860                           prodl	equ	0xFF3
  3861                           indf0	equ	0xFEF
  3862                           postinc0	equ	0xFEE
  3863                           postdec0	equ	0xFED
  3864                           preinc0	equ	0xFEC
  3865                           plusw0	equ	0xFEB
  3866                           fsr0h	equ	0xFEA
  3867                           fsr0l	equ	0xFE9
  3868                           wreg	equ	0xFE8
  3869                           indf1	equ	0xFE7
  3870                           postinc1	equ	0xFE6
  3871                           postdec1	equ	0xFE5
  3872                           preinc1	equ	0xFE4
  3873                           plusw1	equ	0xFE3
  3874                           fsr1h	equ	0xFE2
  3875                           fsr1l	equ	0xFE1
  3876                           bsr	equ	0xFE0
  3877                           indf2	equ	0xFDF
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           preinc2	equ	0xFDC
  3881                           plusw2	equ	0xFDB
  3882                           fsr2h	equ	0xFDA
  3883                           fsr2l	equ	0xFD9
  3884                           status	equ	0xFD8

Data Sizes:
    Strings     124
    Constant    0
    Data        27
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     41      90
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    LCDStr@str	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_11(CODE[16]), STR_10(CODE[12]), STR_9(CODE[13]), STR_8(CODE[16]), 
		 -> STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[9]), STR_4(CODE[16]), 
		 -> STR_3(CODE[9]), STR_2(CODE[14]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_displayNumbers
    _displayNumbers->___awdiv
    _LCDStr->_LCDGoto
    _LCDGoto->_LCDCmd
    _InitLCD->_LCDCmd

Critical Paths under _my_ISR in COMRAM

    _my_ISR->i2___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _my_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _my_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _my_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _my_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _my_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _my_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _my_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _my_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _my_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _my_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _my_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _my_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _my_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _my_ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0    7285
                                             33 COMRAM     8     8      0
                            _InitLCD
                             _LCDCmd
                            _LCDGoto
                             _LCDStr
                            ___awdiv
           _config_ADC_Potentiometer
             _config_ADC_Thermometer
                    _delayWithTimer2
                     _displayNumbers
             _init_ADC_Potentiometer
               _init_ADC_Thermometer
                         _init_Clock
                         _init_PORTB
                        _init_TIMER0
                        _init_TIMER1
                        _init_TIMER2
                      _passwordCheck
 ---------------------------------------------------------------------------------
 (1) _passwordCheck                                        5     3      2      90
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_TIMER2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TIMER1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_TIMER0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_PORTB                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_Clock                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC_Thermometer                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ADC_Potentiometer                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displayNumbers                                       7     4      3    2550
                                             26 COMRAM     7     4      3
                             _LCDDat
                            _LCDGoto
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     704
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _delayWithTimer2                                      4     2      2     198
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _config_ADC_Thermometer                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_ADC_Potentiometer                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDStr                                               5     3      2    2220
                                             22 COMRAM     5     3      2
                             _LCDDat
                            _LCDGoto
 ---------------------------------------------------------------------------------
 (2) _LCDGoto                                              2     1      1    1272
                                             20 COMRAM     2     1      1
                             _LCDCmd
 ---------------------------------------------------------------------------------
 (2) _LCDDat                                               2     2      0      22
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _InitLCD                                              0     0      0      22
                             _LCDCmd
 ---------------------------------------------------------------------------------
 (3) _LCDCmd                                               2     2      0      22
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _my_ISR                                              14    14      0     807
                                              8 COMRAM    10    10      0
                            ___lwdiv
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (5) i2___awdiv                                            8     4      4     352
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitLCD
     _LCDCmd
   _LCDCmd
   _LCDGoto
     _LCDCmd
   _LCDStr
     _LCDDat
     _LCDGoto
   ___awdiv
   _config_ADC_Potentiometer
   _config_ADC_Thermometer
   _delayWithTimer2
   _displayNumbers
     _LCDDat
     _LCDGoto
     ___awdiv
   _init_ADC_Potentiometer
   _init_ADC_Thermometer
   _init_Clock
   _init_PORTB
   _init_TIMER0
   _init_TIMER1
   _init_TIMER2
   _passwordCheck

 _my_ISR (ROOT)
   ___lwdiv
   i2___awdiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     29      5A       1       71.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5A      34        0.0%
DATA                 0      0      5A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Jun  6 17:19:59 2021

           __end_of_displayNumbers 1820                       ___awdiv@sign 0018  
           ??_init_ADC_Thermometer 0013                                l202 1BEC  
                              l212 1C74                                l300 109A  
                              l320 12D2                                l209 1C92  
                              l217 1B68                                l225 1A30  
                              l315 1220                                l228 1B9A  
                              l325 1368                                l350 181E  
                              l182 1CC4                                l190 1C54  
                              l193 1C12                                l353 1CD6  
                              l186 1BC4                                l187 1BC6  
                              l179 1C34                                l339 1AFA  
                              l196 1CF8                                l356 1D02  
                              l199 1CE8                                l590 18E2  
                              _GIE 007F97                                _PR2 000FCB  
                              u600 18D2                                u601 18CE  
                              u610 1BC4                                u611 1BC0  
                              u540 1B48                                u620 19E0  
                              u541 1B44                                u621 19DC  
                              u630 19F8                                u550 1832  
                              u631 19F4                                u551 182E  
                              u640 1A30                                u560 184C  
                              u641 1A2C                                u561 1848  
                              u570 1872                                u650 1766  
                              u571 186E                                u651 1762  
                              u580 1890                                u660 1AD4  
                              u581 188C                                u661 1AD0  
                              u590 18AC                                u670 1AF2  
                              u591 18A8                                u671 1AEE  
                              _PSA 007EAB                                u960 1138  
                              u961 1134                                u970 117C  
                              u971 1178                                u980 11F8  
                              u981 11F4                                u990 128C  
                              u991 1288     __end_of_config_ADC_Thermometer 1CEA  
                              wreg 000FE8                    __end_of_LCDGoto 1B6A  
                             l2000 1B94                               l2002 1CFA  
                             l2010 1CCE                               l2020 174C  
                             l2012 1CD0                               l2004 1CC6  
                             l2030 1792                               l2022 1750  
                             l2014 1CD2                               l2006 1CCA  
                             l2040 17B8                               l2032 1796  
                             l2024 1766                               l2016 1CD4  
                             l2008 1CCC                               l2050 17E2  
                             l2042 17C2                               l2034 179E  
                             l2026 1772                               l2044 17C8  
                             l2036 17A8                               l2028 1788  
                             l2060 1AA6                               l2300 108A  
                             l2046 17D2                               l2038 17AE  
                             l2054 17EC                               l2310 10B6  
                             l2302 108E                               l2048 17DC  
                             l2072 1AE0                               l2400 128C  
                             l2320 10E2                               l2312 10C2  
                             l2304 1092                               l2074 1AE2  
                             l2066 1AAA                               l2410 12CA  
                             l2402 1290                               l2330 1112  
                             l2322 10F8                               l2314 10CE  
                             l2306 10A6                               l2076 1AF2  
                             l2068 1AD4                               l2420 1318  
                             l2412 12E2                               l2404 1292  
                             l2500 123A                               l2332 111A  
                             l2324 1104                               l2316 10D2  
                             l2308 10AC                               l2502 1800  
                             l2430 1342                               l2422 1324  
                             l2406 129A                               l2414 12EA  
                             l2350 1180                               l2342 1140  
                             l2334 1128                               l2326 1108  
                             l2318 10D8                               l1800 1832  
                             l2440 1388                               l2432 134C  
                             l2424 1326                               l2416 12FA  
                             l2408 12BA                               l2360 11AE  
                             l2352 1184                               l2344 115C  
                             l2336 1138                               l2328 1110  
                             l1810 1858                               l1802 183A  
                             l2450 1392                               l2442 138A  
                             l2426 132C                               l2418 1306  
                             l2434 1358                               l2370 11DC  
                             l2362 11BA                               l2354 119C  
                             l2346 1160                               l1820 1890  
                             l1812 1860                               l1804 183E  
                             l1900 1C44                               l2460 13C2  
                             l2452 1394                               l2444 138C  
                             l2436 136A                               l2428 1336  
                             l2380 1204                               l2372 11DE  
                             l2364 11C4                               l2356 119E  
                             l2348 117C                               l1830 18BC  
                             l1822 1896                               l1814 1872  
                             l1806 184C                               l1910 1C06  
                             l1902 1C46                               l2470 13F8  
                             l2462 13CC                               l2454 13A6  
                             l2446 138E                               l2438 1386  
                             l2390 1260                               l2382 1210  
                             l2374 11E6                               l2366 11D0  
                             l2358 11A4                               l2294 107E  
                             l1824 18AC                               l1816 187A  
                             l1832 18C2                               l1808 1854  
                             l1920 1C10                               l1912 1C08  
                             l1840 1C14                               l1904 1C48  
                             l2480 141E                               l2472 13FA  
                             l2456 13AC                               l2464 13DC  
                             l2448 1390                               l2392 1264  
                             l2376 11E8                               l2368 11D4  
                             l2296 1082                               l1770 1C82  
                             l1930 1CF4                               l1834 18D2  
                             l1826 18B4                               l1818 1882  
                             l1914 1C0A                               l1850 1C20  
                             l1842 1C18                               l1906 1C4A  
                             l2482 142A                               l2474 13FC  
                             l2466 13E2                               l2458 13B6  
                             l2394 1266                               l2386 1226  
                             l2378 11F8                               l2298 1086  
                             l1772 1C90                               l1764 1C78  
                             l1780 1C62                               l1924 1CEA  
                             l1940 1CE4                               l1836 18DA  
                             l1828 18B6                               l1916 1C0C  
                             l1908 1BEE                               l1860 1C2A  
                             l1852 1C22                               l1844 1C1A  
                             l2476 140E                               l2468 13EC  
                             l2396 126E                               l2388 1258  
                             l1766 1C7C                               l1782 1C70  
                             l1774 1C58                               l1790 1B56  
                             l1926 1CEE                               l1934 1CD8  
                             l1918 1C0E                               l1950 1BE4  
                             l1862 1C2C                               l1854 1C24  
                             l1846 1C1C                               l1870 1CB4  
                             l2478 1414                               l2398 127C  
                             l1768 1C80                               l1784 1C72  
                             l1776 1C5C                               l1792 1B60  
                             l1960 19A8                               l1928 1CF0  
                             l1936 1CDC                               l1952 1BE6  
                             l1944 1BC8                               l1864 1C30  
                             l1856 1C26                               l1848 1C1E  
                             l1880 1CBE                               l1872 1CB6  
                             l1778 1C60                               l1794 1B64  
                             l1786 1B38                               l1970 19E4  
                             l1962 19B0                               l1938 1CE0  
                             l1890 1BA4                               l1954 1BE8  
                             l1946 1BE0                               l1858 1C28  
                             l1882 1CC0                               l1874 1CB8  
                             l1788 1B48                               l1972 19E6  
                             l1964 19CC                               l1980 1A08  
                             l1892 1BA6                               l1796 1820  
                             l1956 1BEA                               l1948 1BE2  
                             l1884 1CC2                               l1876 1CBA  
                             l1868 1CB0                               l1990 1B76  
                             l1982 1B6A                               l1974 19F8  
                             l1966 19CE                               l1894 1BAE  
                             l1798 1824                               l1878 1CBC  
                             l1992 1B7C                               l1984 1B6E  
                             l1976 19FC                               l1968 19E0  
                             l1888 1B9C                               l1896 1C36  
                             l1994 1B82                               l1986 1B72  
                             l1978 1A06                               l1898 1C42  
                      main@isValid 0024                               l1996 1B88  
                             l1988 1B74                               l1998 1B8E  
                             _ADIE 007CEE                               _ADIF 007CF6  
                             _ADIP 007CFE                               STR_1 1001  
                             STR_2 1042                               STR_3 1074  
                             STR_4 1022                               STR_5 1074  
                             STR_6 1069                               STR_7 1074  
                             STR_8 1032                               STR_9 1050  
                             u1000 12CA                               u1001 12C6  
                             _T0CS 007EAD                               u1010 12E2  
                             u1011 12DE                               u1020 12FA  
                             u1021 12F6                               u1030 1318  
                             u1031 1314                               u1040 1368  
                             u1041 1364                               u1050 13A6  
                             u1051 13A2                               u1107 1294  
                             u1060 140E                               u1117 1C68  
                             u1061 140A                               u1127 1C88  
                             u1077 1114                               u1087 11E0  
                             u1097 1268                               _IPEN 007E87  
                             _PEIE 007F96                               _RBIE 007F93  
                             _RBIF 007F90                               _RBIP 007F88  
                             _RBPU 007F8F                               _TMR2 000FCC  
                             _main 107E                               fsr2h 000FDA  
                             indf1 000FE7                               indf2 000FDF  
                             fsr1l 000FE1                               fsr2l 000FD9  
                             btemp 005B                               prodh 000FF4  
                             prodl 000FF3                               start 000E  
               my_ISR@read_ADC_Raw 0011                       ?_init_TIMER0 0001  
                     ?_init_TIMER1 0001                       ?_init_TIMER2 0001  
                     ___param_bank 000000                    __end_of_InitLCD 1B9C  
                  ?_displayNumbers 001B                              ?_main 0001  
                  __end_of___awdiv 18E4                              STR_10 105D  
                            STR_11 1012                              _T0CON 000FD5  
                  ___awdiv@divisor 0015                              _T1CON 000FCD  
                            _T2CON 000FCA                              _T0PS0 007EA8  
                            _T0PS1 007EA9                              _T0PS2 007EAA  
                            _IRCF0 007E9C                              _IRCF1 007E9D  
                            _IRCF2 007E9E                    __end_of___lwdiv 1AA6  
                            i2l240 14D2                              i2l244 15AC  
                            i2l238 149C                              i2l247 15AA  
                            i2l265 1738                              i2l590 19A6  
                            i2l850 1A9C                              i2l857 1AA4  
                  ___awdiv@counter 0017                              _PLLEN 007CDE  
                            _TMR0H 000FD7                              _TMR1H 000FCF  
                            _TMR0L 000FD6                              _TMR1L 000FCE  
                            _PORTA 000F80                              _PORTB 000F81  
                            _PORTD 000F83                              _PORTE 000F84  
                            _TRISA 000F92                              _TRISB 000F93  
                            _TRISD 000F95                              _lcd_x 0043  
                            _lcd_y 0042           __size_of_delayWithTimer2 002C  
                            main@i 0027                              tablat 000FF5  
                            ttemp5 005C                              ttemp6 005F  
                            ttemp7 0063                              status 000FD8  
                            wtemp8 005C                 __size_ofi2___awdiv 00C4  
                  __initialization 1AFC                       __end_of_main 143E  
            __end_of_passwordCheck 1AFC                             ??_main 0022  
                    __activetblptr 000002                          ??_LCDGoto 0016  
                           _ADCON0 000FC2                             _ADCON1 000FC1  
                           _ADCON2 000FC0                             _ADRESH 000FC4  
                           _ADRESL 000FC3                             _T08BIT 007EAE  
              displayNumbers@value 001B                   ___awdiv@dividend 0013  
                           _LCDDat 1C56                             _LCDCmd 1C76  
                           _INT0IE 007F94                             _INT0IF 007F91  
                           i2l2100 1A96                             i2l2110 1902  
                           i2l2102 18E4                             i2l2120 1936  
                           i2l2112 1910                             i2l2104 18E8  
                           i2l2200 15BA                             i2l2130 1970  
                           i2l2122 193E                             i2l2114 1918  
                           i2l2106 18F6                             i2l2210 15EA  
                           i2l2202 15BE                             i2l2140 1996  
                           i2l2132 1978                             i2l2124 1946  
                           i2l2116 191C                             i2l2108 18FE  
                           i2l2220 161C                             i2l2204 15C2  
                           i2l2212 15EC                             i2l2142 199E  
                           i2l2134 197A                             i2l2126 1954  
                           i2l2118 1924                             i2l2230 1650  
                           i2l2222 162C                             i2l2214 15FA  
                           i2l2206 15D6                             i2l2150 145E  
                           i2l2080 1A32                             i2l2136 1980  
                           i2l2128 195A                             i2l2240 1676  
                           i2l2232 1660                             i2l2224 163C  
                           i2l2216 1610                             i2l2208 15E2  
                           i2l2160 14B2                             i2l2152 146A  
                           i2l2090 1A6A                             i2l2082 1A3A  
                           i2l2138 1986                             i2l2250 1698  
                           i2l2242 167A                             i2l2234 1668  
                           i2l2226 163E                             i2l2218 161A  
                           i2l2170 14FC                             i2l2162 14CE  
                           i2l2154 1472                             i2l2146 1450  
                           i2l2092 1A70                             i2l2084 1A4C  
                           i2l2260 16CE                             i2l2252 16A8  
                           i2l2236 1670                             i2l2228 164E  
                           i2l2244 167C                             i2l2180 1526  
                           i2l2172 150E                             i2l2164 14E2  
                           i2l2156 147A                             i2l2148 145E  
                           i2l2094 1A86                             i2l2086 1A54  
                           i2l2270 1706                             i2l2262 16D2  
                           i2l2254 16AA                             i2l2246 168A  
                           i2l2238 1672                             i2l2190 1564  
                           i2l2182 1536                             i2l2174 1512  
                           i2l2166 14F4                             i2l2158 148C  
                           _LCDStr 19A8                             i2l2096 1A8E  
                           i2l2088 1A5C                             i2l2280 1722  
                           i2l2272 1708                             i2l2264 16E2  
                           i2l2256 16BE                             i2l2248 1696  
                           i2l2504 158C                             i2l2184 1546  
                           i2l2168 14F8                             i2l2176 1514  
                           i2l2098 1A90                             i2l2274 1716  
                           i2l2266 16E4                             i2l2258 16C0  
                           i2l2282 1724                             i2l2186 154C  
                           i2l2284 1732                             i2l2276 171A  
                           i2l2268 16F6                             i2l2188 155C  
                           i2l2286 1736                             i2l2278 171E  
                           i2l2198 1578                             _TMR0IE 007F95  
                           _TMR0IF 007F92                             _TMR1IE 007CE8  
                           _TMR1IF 007CF0                             _TMR1CS 007E69  
                           _TMR2IE 007CE9                             _TMR2IF 007CF1  
                           _TMR0ON 007EAF                             _TMR1ON 007E68  
                           _TMR2ON 007E52                          ??_InitLCD 0015  
                   _downCounter90s 0044           ??_init_ADC_Potentiometer 0013  
                        ??___awdiv 0017                          ??___lwdiv 0005  
                           _my_ISR 0008         ??_config_ADC_Potentiometer 0013  
                           clear_0 1B22                   ___awdiv@quotient 0019  
                           isa$std 000001                             _start3 0056  
                   i2___awdiv@sign 0006                       __pdataCOMRAM 002A  
                __end_ofi2___awdiv 19A8                       __mediumconst 0000  
                           tblptrh 000FF7                             tblptrl 000FF6  
                           tblptru 000FF8                          LCDDat@dat 0014  
                        LCDCmd@cmd 0014                         __accesstop 0080  
          __end_of__initialization 1B28                  ??_delayWithTimer2 0015  
                    ___rparam_used 000001                     __pcstackCOMRAM 0001  
                        LCDStr@str 0017               __size_of_init_TIMER0 0022  
             __size_of_init_TIMER1 0016               __size_of_init_TIMER2 0020  
                          ?_LCDDat 0001                            ?_LCDCmd 0001  
                          ?_LCDStr 0017                            LCDStr@i 001B  
                 ??_displayNumbers 001E    __size_of_init_ADC_Potentiometer 0026  
             displayNumbers@digitH 0021               displayNumbers@digitL 0020  
                          ?_my_ISR 0001                            _T1CKPS0 007E6C  
                          _T1CKPS1 007E6D                     main@attemption 0029  
                          _T1OSCEN 007E6B                            _LCDGoto 1B36  
    __size_of_init_ADC_Thermometer 0026                            i2u70_40 1A86  
                          i2u70_41 1A82                            i2u71_40 18F6  
                          i2u71_41 18F2                            i2u72_40 1910  
                          i2u80_40 14E2                            i2u72_41 190C  
                          i2u80_41 14DE                            i2u73_40 1936  
                          i2u81_40 14F4                            i2u73_41 1932  
                          i2u81_41 14F0                            i2u74_40 1954  
                          i2u90_40 162C                            i2u82_40 150E  
                          i2u74_41 1950                            i2u90_41 1628  
                          i2u82_41 150A                            i2u75_40 1970  
                          i2u91_40 163C                            i2u83_40 1522  
                          i2u75_41 196C                            i2u91_41 1638  
                          i2u83_41 151E                            i2u68_40 1A4C  
                          i2u76_40 1996                            i2u92_40 164E  
                          i2u84_40 1536                            i2u68_41 1A48  
                          i2u76_41 1992                            i2u92_41 164A  
                          i2u84_41 1532                            i2u69_40 1A6A  
                          i2u93_40 1660                            i2u85_40 155C  
                          i2u77_40 145E                            i2u69_41 1A66  
                          i2u93_41 165C                            i2u85_41 1558  
                          i2u77_41 145A                            i2u94_40 168A  
                          i2u86_40 1574                            i2u78_40 148C  
                          i2u94_41 1686                            i2u86_41 1570  
                          i2u78_41 1488                            i2u95_40 1732  
                          i2u87_40 15BA                            i2u79_40 14B2  
                          i2u95_41 172E                            i2u87_41 15B6  
                          i2u79_41 14AE                            i2u88_40 15D6  
                          i2u88_41 15D2                            i2u89_40 15FA  
                          i2u89_41 15F6                    __size_of_LCDDat 0020  
                  __size_of_LCDCmd 001E                    __size_of_LCDStr 008A  
                          _InitLCD 1B6A                            __Hparam 0000  
                          __Lparam 0000                         _init_PORTB 1CC6  
                     my_ISR@before 000F                         _init_Clock 1CFA  
                          ___awdiv 1820                            ___lwdiv 1A32  
 __end_of_config_ADC_Potentiometer 1CFA                       __psmallconst 1000  
                          __pcinit 1AFC                    __size_of_my_ISR 1744  
                          __ramtop 1000                            __ptext0 107E  
                          __ptext1 1AA6                            __ptext2 1C36  
                          __ptext3 1CB0                            __ptext4 1C14  
                          __ptext5 1CC6                            __ptext6 1CFA  
                          __ptext7 1BC8                            __ptext8 1BEE  
                          __ptext9 174C             _init_ADC_Potentiometer 1BEE  
                   __pintcode_body 143E               end_of_initialization 1B28  
                    __Lmediumconst 0000                            int_func 143E  
                          postdec1 000FE5                            postinc0 000FEE  
                          postinc1 000FE6                            postinc2 000FDE  
                       _result_ADC 0059           ??_config_ADC_Thermometer 0013  
                        _PORTEbits 000F84                          _TRISEbits 000F96  
                  _delayWithTimer2 1B9C                          i2___awdiv 18E4  
           __size_of_passwordCheck 0056                     __end_of_LCDDat 1C76  
                   __end_of_LCDCmd 1C94                     __end_of_LCDStr 1A32  
                       LCDGoto@p_1 0015                         LCDGoto@p_2 0016  
               i2___awdiv@dividend 0001                        ?_init_PORTB 0001  
                      ?_init_Clock 0001                      __pidataCOMRAM 1C94  
                   __end_of_my_ISR 174C                start_initialization 1AFC  
               i2___awdiv@quotient 0007                         ?i2___awdiv 0001  
__size_of_config_ADC_Potentiometer 0010                           ??_LCDDat 0013  
                         ??_LCDCmd 0013          ?_config_ADC_Potentiometer 0001  
                         ??_LCDStr 0019          delayWithTimer2@currentVal 0015  
                    ??_init_TIMER0 0013                      ??_init_TIMER1 0013  
                    ??_init_TIMER2 0013                         my_ISR@flip 0053  
                    _passwordCheck 1AA6                           ??_my_ISR 0009  
  __size_of_config_ADC_Thermometer 0012            __end_of_delayWithTimer2 1BC8  
      delayWithTimer2@milliseconds 0013                           ?_LCDGoto 0015  
                      __pbssCOMRAM 0045                __size_of_init_PORTB 0012  
              __size_of_init_Clock 000A                     my_ISR@portData 0010  
     __end_of_init_ADC_Thermometer 1BEE                           ?_InitLCD 0001  
                 ___lwdiv@dividend 0001                          __pintcode 0008  
                      _blinkEnable 0055                     ?_passwordCheck 0013  
                         ?___awdiv 0013                           ?___lwdiv 0001  
              __end_of_init_TIMER0 1C36                __end_of_init_TIMER1 1CC6  
              __end_of_init_TIMER2 1C56              displayNumbers@digitNo 001D  
          ?_init_ADC_Potentiometer 0001                        __smallconst 1000  
                        _firstTime 0058                          _lockAgain 004F  
                 ___lwdiv@quotient 0005                        ??i2___awdiv 0005  
                        _safeState 0057             _config_ADC_Thermometer 1CD8  
                         i2u113_47 16C6                           i2u114_47 16EA  
                         i2u115_47 170E                           _TIM0LOAD 003E  
                         _TIM1LOAD 003A                           _PIR1bits 000F9E  
                      _displayData 0045     __end_of_init_ADC_Potentiometer 1C14  
                 ?_delayWithTimer2 0013            __size_of_displayNumbers 00D4  
                 __size_of_LCDGoto 0034                  i2___awdiv@divisor 0003  
                i2___awdiv@counter 0005                          copy_data0 1B10  
                  _digitEntryCount 005A              main@heaterTemperature 0026  
                 __size_of_InitLCD 0032                           __Hrparam 0000  
                  ??_passwordCheck 0015                        _init_TIMER0 1C14  
                      _init_TIMER1 1CB0                        _init_TIMER2 1C36  
                     ??_init_PORTB 0013                           __Lrparam 0000  
                     ??_init_Clock 0013                      my_ISR@halfSec 0054  
                     _passwordsSet 0049                   __size_of___awdiv 00C4  
                 __size_of___lwdiv 0074               _init_ADC_Thermometer 1BC8  
                  ___lwdiv@divisor 0003                    ___lwdiv@counter 0007  
                         __ptext10 1820                           __ptext11 1B9C  
                         __ptext20 18E4                           __ptext12 1CD8  
                         __ptext21 1A32                           __ptext13 1CEA  
                         __ptext14 19A8                           __ptext15 1B36  
                         __ptext16 1C56                           __ptext17 1B6A  
                         __ptext18 1C76                 __end_of_init_PORTB 1CD8  
               __end_of_init_Clock 1D04                      __size_of_main 03C0  
                         isa$xinst 000000                           int$flags 005B  
            ?_init_ADC_Thermometer 0001                        _segmentData 002A  
                         intlevel2 0000                        _TMR2Counter 0051  
                 _passwordsAttempt 004C                     _displayNumbers 174C  
          ?_config_ADC_Thermometer 0001           _config_ADC_Potentiometer 1CEA  
                   passwordCheck@n 0017  
